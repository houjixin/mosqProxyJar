/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xyz.service.thrift.stub;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.xyz.service.thrift.datatype.*;
public class MosqProxyStub {

  /**
   * **************************************************************************************************
   *  服务接口
   * ***************************************************************************************************
   */
  public interface Iface {

    public ResStr getConnection(long logIndex, String caller, String ext) throws org.apache.thrift.TException;

    public ResStr registerConnection(long logIndex, String caller, String appId, String userId, String devId, String ext) throws org.apache.thrift.TException;

    public ResStr forceRegisterConnection(long logIndex, String caller, String appId, String userId, String devId, String ext) throws org.apache.thrift.TException;

    public ResStr bindConnId(long logIndex, String caller, String appId, String userId, String devId, String connId, String ext) throws org.apache.thrift.TException;

    public ResStr forceBindConnId(long logIndex, String caller, String appId, String userId, String devId, String connId, String ext) throws org.apache.thrift.TException;

    /**
     * 查询指定用户的在线状态，需要指明待查询用户连接的是哪个mosquitto
     * @param logIndex 	 日志索引
     * @param caller	 调用方的标识
     * @param appid   应用标识
     * @param userid  用户标识
     * @param devid   设备标识
     * @param ext	 扩展参数，JSON字符串格式
     * @return ResStr		 result保持操作结果， 成功时由value字段返回结果，value为JSON格式字符串，它包含online字段，字段值含义为：用户是否在线，1为在线，2为不在线，-1为未获取到在线情况
     * 
     * 
     * @param logIndex
     * @param caller
     * @param appId
     * @param userId
     * @param devId
     * @param ext
     */
    public ResStr getClientStatus(long logIndex, String caller, String appId, String userId, String devId, String ext) throws org.apache.thrift.TException;

    public ResBool sendMsgToUser(long logIndex, String caller, String appId, String userId, String topic, String msg, String ext) throws org.apache.thrift.TException;

    public ResBool sendMsgToDevType(long logIndex, String caller, String appId, String userId, String devType, String topic, String msg, String ext) throws org.apache.thrift.TException;

    public ResBool sendBroadcastMsg(long logIndex, String caller, String appId, String topic, String msg, String ext) throws org.apache.thrift.TException;

    public ResSetStr sendMsgToUsers(long logIndex, String caller, String appId, Set<String> dstUserIds, String topic, String msg, String ext) throws org.apache.thrift.TException;

    /**
     * * 函数名称：echo
     * * 函数功能：传递一个字符串给Thrift服务器，服务器把这个字符串原封不动的返回
     * * @author houjixin
     * * @param  logIndex 	日志索引
     * * @param  caller 		调用方的标识，每个模块要调用本模块时都要提供调用方的标识；
     * * @param  srcStr			传递给Thrift服务器的字符串
     * * @param  ext   			扩展参数，JSON字符串格式
     *  * @return ResStr 				res中返回操作结果，value中返回字符串
     * *
     * 
     * @param logIndex
     * @param caller
     * @param srcStr
     * @param ext
     */
    public ResStr echo(long logIndex, String caller, String srcStr, String ext) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getConnection(long logIndex, String caller, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void registerConnection(long logIndex, String caller, String appId, String userId, String devId, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void forceRegisterConnection(long logIndex, String caller, String appId, String userId, String devId, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bindConnId(long logIndex, String caller, String appId, String userId, String devId, String connId, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void forceBindConnId(long logIndex, String caller, String appId, String userId, String devId, String connId, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getClientStatus(long logIndex, String caller, String appId, String userId, String devId, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendMsgToUser(long logIndex, String caller, String appId, String userId, String topic, String msg, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendMsgToDevType(long logIndex, String caller, String appId, String userId, String devType, String topic, String msg, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendBroadcastMsg(long logIndex, String caller, String appId, String topic, String msg, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendMsgToUsers(long logIndex, String caller, String appId, Set<String> dstUserIds, String topic, String msg, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void echo(long logIndex, String caller, String srcStr, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ResStr getConnection(long logIndex, String caller, String ext) throws org.apache.thrift.TException
    {
      send_getConnection(logIndex, caller, ext);
      return recv_getConnection();
    }

    public void send_getConnection(long logIndex, String caller, String ext) throws org.apache.thrift.TException
    {
      getConnection_args args = new getConnection_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setExt(ext);
      sendBase("getConnection", args);
    }

    public ResStr recv_getConnection() throws org.apache.thrift.TException
    {
      getConnection_result result = new getConnection_result();
      receiveBase(result, "getConnection");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getConnection failed: unknown result");
    }

    public ResStr registerConnection(long logIndex, String caller, String appId, String userId, String devId, String ext) throws org.apache.thrift.TException
    {
      send_registerConnection(logIndex, caller, appId, userId, devId, ext);
      return recv_registerConnection();
    }

    public void send_registerConnection(long logIndex, String caller, String appId, String userId, String devId, String ext) throws org.apache.thrift.TException
    {
      registerConnection_args args = new registerConnection_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setAppId(appId);
      args.setUserId(userId);
      args.setDevId(devId);
      args.setExt(ext);
      sendBase("registerConnection", args);
    }

    public ResStr recv_registerConnection() throws org.apache.thrift.TException
    {
      registerConnection_result result = new registerConnection_result();
      receiveBase(result, "registerConnection");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerConnection failed: unknown result");
    }

    public ResStr forceRegisterConnection(long logIndex, String caller, String appId, String userId, String devId, String ext) throws org.apache.thrift.TException
    {
      send_forceRegisterConnection(logIndex, caller, appId, userId, devId, ext);
      return recv_forceRegisterConnection();
    }

    public void send_forceRegisterConnection(long logIndex, String caller, String appId, String userId, String devId, String ext) throws org.apache.thrift.TException
    {
      forceRegisterConnection_args args = new forceRegisterConnection_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setAppId(appId);
      args.setUserId(userId);
      args.setDevId(devId);
      args.setExt(ext);
      sendBase("forceRegisterConnection", args);
    }

    public ResStr recv_forceRegisterConnection() throws org.apache.thrift.TException
    {
      forceRegisterConnection_result result = new forceRegisterConnection_result();
      receiveBase(result, "forceRegisterConnection");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "forceRegisterConnection failed: unknown result");
    }

    public ResStr bindConnId(long logIndex, String caller, String appId, String userId, String devId, String connId, String ext) throws org.apache.thrift.TException
    {
      send_bindConnId(logIndex, caller, appId, userId, devId, connId, ext);
      return recv_bindConnId();
    }

    public void send_bindConnId(long logIndex, String caller, String appId, String userId, String devId, String connId, String ext) throws org.apache.thrift.TException
    {
      bindConnId_args args = new bindConnId_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setAppId(appId);
      args.setUserId(userId);
      args.setDevId(devId);
      args.setConnId(connId);
      args.setExt(ext);
      sendBase("bindConnId", args);
    }

    public ResStr recv_bindConnId() throws org.apache.thrift.TException
    {
      bindConnId_result result = new bindConnId_result();
      receiveBase(result, "bindConnId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bindConnId failed: unknown result");
    }

    public ResStr forceBindConnId(long logIndex, String caller, String appId, String userId, String devId, String connId, String ext) throws org.apache.thrift.TException
    {
      send_forceBindConnId(logIndex, caller, appId, userId, devId, connId, ext);
      return recv_forceBindConnId();
    }

    public void send_forceBindConnId(long logIndex, String caller, String appId, String userId, String devId, String connId, String ext) throws org.apache.thrift.TException
    {
      forceBindConnId_args args = new forceBindConnId_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setAppId(appId);
      args.setUserId(userId);
      args.setDevId(devId);
      args.setConnId(connId);
      args.setExt(ext);
      sendBase("forceBindConnId", args);
    }

    public ResStr recv_forceBindConnId() throws org.apache.thrift.TException
    {
      forceBindConnId_result result = new forceBindConnId_result();
      receiveBase(result, "forceBindConnId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "forceBindConnId failed: unknown result");
    }

    public ResStr getClientStatus(long logIndex, String caller, String appId, String userId, String devId, String ext) throws org.apache.thrift.TException
    {
      send_getClientStatus(logIndex, caller, appId, userId, devId, ext);
      return recv_getClientStatus();
    }

    public void send_getClientStatus(long logIndex, String caller, String appId, String userId, String devId, String ext) throws org.apache.thrift.TException
    {
      getClientStatus_args args = new getClientStatus_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setAppId(appId);
      args.setUserId(userId);
      args.setDevId(devId);
      args.setExt(ext);
      sendBase("getClientStatus", args);
    }

    public ResStr recv_getClientStatus() throws org.apache.thrift.TException
    {
      getClientStatus_result result = new getClientStatus_result();
      receiveBase(result, "getClientStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getClientStatus failed: unknown result");
    }

    public ResBool sendMsgToUser(long logIndex, String caller, String appId, String userId, String topic, String msg, String ext) throws org.apache.thrift.TException
    {
      send_sendMsgToUser(logIndex, caller, appId, userId, topic, msg, ext);
      return recv_sendMsgToUser();
    }

    public void send_sendMsgToUser(long logIndex, String caller, String appId, String userId, String topic, String msg, String ext) throws org.apache.thrift.TException
    {
      sendMsgToUser_args args = new sendMsgToUser_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setAppId(appId);
      args.setUserId(userId);
      args.setTopic(topic);
      args.setMsg(msg);
      args.setExt(ext);
      sendBase("sendMsgToUser", args);
    }

    public ResBool recv_sendMsgToUser() throws org.apache.thrift.TException
    {
      sendMsgToUser_result result = new sendMsgToUser_result();
      receiveBase(result, "sendMsgToUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendMsgToUser failed: unknown result");
    }

    public ResBool sendMsgToDevType(long logIndex, String caller, String appId, String userId, String devType, String topic, String msg, String ext) throws org.apache.thrift.TException
    {
      send_sendMsgToDevType(logIndex, caller, appId, userId, devType, topic, msg, ext);
      return recv_sendMsgToDevType();
    }

    public void send_sendMsgToDevType(long logIndex, String caller, String appId, String userId, String devType, String topic, String msg, String ext) throws org.apache.thrift.TException
    {
      sendMsgToDevType_args args = new sendMsgToDevType_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setAppId(appId);
      args.setUserId(userId);
      args.setDevType(devType);
      args.setTopic(topic);
      args.setMsg(msg);
      args.setExt(ext);
      sendBase("sendMsgToDevType", args);
    }

    public ResBool recv_sendMsgToDevType() throws org.apache.thrift.TException
    {
      sendMsgToDevType_result result = new sendMsgToDevType_result();
      receiveBase(result, "sendMsgToDevType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendMsgToDevType failed: unknown result");
    }

    public ResBool sendBroadcastMsg(long logIndex, String caller, String appId, String topic, String msg, String ext) throws org.apache.thrift.TException
    {
      send_sendBroadcastMsg(logIndex, caller, appId, topic, msg, ext);
      return recv_sendBroadcastMsg();
    }

    public void send_sendBroadcastMsg(long logIndex, String caller, String appId, String topic, String msg, String ext) throws org.apache.thrift.TException
    {
      sendBroadcastMsg_args args = new sendBroadcastMsg_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setAppId(appId);
      args.setTopic(topic);
      args.setMsg(msg);
      args.setExt(ext);
      sendBase("sendBroadcastMsg", args);
    }

    public ResBool recv_sendBroadcastMsg() throws org.apache.thrift.TException
    {
      sendBroadcastMsg_result result = new sendBroadcastMsg_result();
      receiveBase(result, "sendBroadcastMsg");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendBroadcastMsg failed: unknown result");
    }

    public ResSetStr sendMsgToUsers(long logIndex, String caller, String appId, Set<String> dstUserIds, String topic, String msg, String ext) throws org.apache.thrift.TException
    {
      send_sendMsgToUsers(logIndex, caller, appId, dstUserIds, topic, msg, ext);
      return recv_sendMsgToUsers();
    }

    public void send_sendMsgToUsers(long logIndex, String caller, String appId, Set<String> dstUserIds, String topic, String msg, String ext) throws org.apache.thrift.TException
    {
      sendMsgToUsers_args args = new sendMsgToUsers_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setAppId(appId);
      args.setDstUserIds(dstUserIds);
      args.setTopic(topic);
      args.setMsg(msg);
      args.setExt(ext);
      sendBase("sendMsgToUsers", args);
    }

    public ResSetStr recv_sendMsgToUsers() throws org.apache.thrift.TException
    {
      sendMsgToUsers_result result = new sendMsgToUsers_result();
      receiveBase(result, "sendMsgToUsers");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendMsgToUsers failed: unknown result");
    }

    public ResStr echo(long logIndex, String caller, String srcStr, String ext) throws org.apache.thrift.TException
    {
      send_echo(logIndex, caller, srcStr, ext);
      return recv_echo();
    }

    public void send_echo(long logIndex, String caller, String srcStr, String ext) throws org.apache.thrift.TException
    {
      echo_args args = new echo_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setSrcStr(srcStr);
      args.setExt(ext);
      sendBase("echo", args);
    }

    public ResStr recv_echo() throws org.apache.thrift.TException
    {
      echo_result result = new echo_result();
      receiveBase(result, "echo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "echo failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getConnection(long logIndex, String caller, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getConnection_call method_call = new getConnection_call(logIndex, caller, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getConnection_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String ext;
      public getConnection_call(long logIndex, String caller, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getConnection", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getConnection_args args = new getConnection_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResStr getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getConnection();
      }
    }

    public void registerConnection(long logIndex, String caller, String appId, String userId, String devId, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerConnection_call method_call = new registerConnection_call(logIndex, caller, appId, userId, devId, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerConnection_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String appId;
      private String userId;
      private String devId;
      private String ext;
      public registerConnection_call(long logIndex, String caller, String appId, String userId, String devId, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.appId = appId;
        this.userId = userId;
        this.devId = devId;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerConnection", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerConnection_args args = new registerConnection_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setAppId(appId);
        args.setUserId(userId);
        args.setDevId(devId);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResStr getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerConnection();
      }
    }

    public void forceRegisterConnection(long logIndex, String caller, String appId, String userId, String devId, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      forceRegisterConnection_call method_call = new forceRegisterConnection_call(logIndex, caller, appId, userId, devId, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class forceRegisterConnection_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String appId;
      private String userId;
      private String devId;
      private String ext;
      public forceRegisterConnection_call(long logIndex, String caller, String appId, String userId, String devId, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.appId = appId;
        this.userId = userId;
        this.devId = devId;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("forceRegisterConnection", org.apache.thrift.protocol.TMessageType.CALL, 0));
        forceRegisterConnection_args args = new forceRegisterConnection_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setAppId(appId);
        args.setUserId(userId);
        args.setDevId(devId);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResStr getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_forceRegisterConnection();
      }
    }

    public void bindConnId(long logIndex, String caller, String appId, String userId, String devId, String connId, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bindConnId_call method_call = new bindConnId_call(logIndex, caller, appId, userId, devId, connId, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bindConnId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String appId;
      private String userId;
      private String devId;
      private String connId;
      private String ext;
      public bindConnId_call(long logIndex, String caller, String appId, String userId, String devId, String connId, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.appId = appId;
        this.userId = userId;
        this.devId = devId;
        this.connId = connId;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bindConnId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bindConnId_args args = new bindConnId_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setAppId(appId);
        args.setUserId(userId);
        args.setDevId(devId);
        args.setConnId(connId);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResStr getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bindConnId();
      }
    }

    public void forceBindConnId(long logIndex, String caller, String appId, String userId, String devId, String connId, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      forceBindConnId_call method_call = new forceBindConnId_call(logIndex, caller, appId, userId, devId, connId, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class forceBindConnId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String appId;
      private String userId;
      private String devId;
      private String connId;
      private String ext;
      public forceBindConnId_call(long logIndex, String caller, String appId, String userId, String devId, String connId, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.appId = appId;
        this.userId = userId;
        this.devId = devId;
        this.connId = connId;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("forceBindConnId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        forceBindConnId_args args = new forceBindConnId_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setAppId(appId);
        args.setUserId(userId);
        args.setDevId(devId);
        args.setConnId(connId);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResStr getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_forceBindConnId();
      }
    }

    public void getClientStatus(long logIndex, String caller, String appId, String userId, String devId, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getClientStatus_call method_call = new getClientStatus_call(logIndex, caller, appId, userId, devId, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getClientStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String appId;
      private String userId;
      private String devId;
      private String ext;
      public getClientStatus_call(long logIndex, String caller, String appId, String userId, String devId, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.appId = appId;
        this.userId = userId;
        this.devId = devId;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getClientStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getClientStatus_args args = new getClientStatus_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setAppId(appId);
        args.setUserId(userId);
        args.setDevId(devId);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResStr getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getClientStatus();
      }
    }

    public void sendMsgToUser(long logIndex, String caller, String appId, String userId, String topic, String msg, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendMsgToUser_call method_call = new sendMsgToUser_call(logIndex, caller, appId, userId, topic, msg, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendMsgToUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String appId;
      private String userId;
      private String topic;
      private String msg;
      private String ext;
      public sendMsgToUser_call(long logIndex, String caller, String appId, String userId, String topic, String msg, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.appId = appId;
        this.userId = userId;
        this.topic = topic;
        this.msg = msg;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendMsgToUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendMsgToUser_args args = new sendMsgToUser_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setAppId(appId);
        args.setUserId(userId);
        args.setTopic(topic);
        args.setMsg(msg);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResBool getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendMsgToUser();
      }
    }

    public void sendMsgToDevType(long logIndex, String caller, String appId, String userId, String devType, String topic, String msg, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendMsgToDevType_call method_call = new sendMsgToDevType_call(logIndex, caller, appId, userId, devType, topic, msg, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendMsgToDevType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String appId;
      private String userId;
      private String devType;
      private String topic;
      private String msg;
      private String ext;
      public sendMsgToDevType_call(long logIndex, String caller, String appId, String userId, String devType, String topic, String msg, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.appId = appId;
        this.userId = userId;
        this.devType = devType;
        this.topic = topic;
        this.msg = msg;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendMsgToDevType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendMsgToDevType_args args = new sendMsgToDevType_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setAppId(appId);
        args.setUserId(userId);
        args.setDevType(devType);
        args.setTopic(topic);
        args.setMsg(msg);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResBool getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendMsgToDevType();
      }
    }

    public void sendBroadcastMsg(long logIndex, String caller, String appId, String topic, String msg, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendBroadcastMsg_call method_call = new sendBroadcastMsg_call(logIndex, caller, appId, topic, msg, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendBroadcastMsg_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String appId;
      private String topic;
      private String msg;
      private String ext;
      public sendBroadcastMsg_call(long logIndex, String caller, String appId, String topic, String msg, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.appId = appId;
        this.topic = topic;
        this.msg = msg;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendBroadcastMsg", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendBroadcastMsg_args args = new sendBroadcastMsg_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setAppId(appId);
        args.setTopic(topic);
        args.setMsg(msg);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResBool getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendBroadcastMsg();
      }
    }

    public void sendMsgToUsers(long logIndex, String caller, String appId, Set<String> dstUserIds, String topic, String msg, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendMsgToUsers_call method_call = new sendMsgToUsers_call(logIndex, caller, appId, dstUserIds, topic, msg, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendMsgToUsers_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String appId;
      private Set<String> dstUserIds;
      private String topic;
      private String msg;
      private String ext;
      public sendMsgToUsers_call(long logIndex, String caller, String appId, Set<String> dstUserIds, String topic, String msg, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.appId = appId;
        this.dstUserIds = dstUserIds;
        this.topic = topic;
        this.msg = msg;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendMsgToUsers", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendMsgToUsers_args args = new sendMsgToUsers_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setAppId(appId);
        args.setDstUserIds(dstUserIds);
        args.setTopic(topic);
        args.setMsg(msg);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResSetStr getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendMsgToUsers();
      }
    }

    public void echo(long logIndex, String caller, String srcStr, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      echo_call method_call = new echo_call(logIndex, caller, srcStr, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class echo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String srcStr;
      private String ext;
      public echo_call(long logIndex, String caller, String srcStr, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.srcStr = srcStr;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("echo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        echo_args args = new echo_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setSrcStr(srcStr);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResStr getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_echo();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getConnection", new getConnection());
      processMap.put("registerConnection", new registerConnection());
      processMap.put("forceRegisterConnection", new forceRegisterConnection());
      processMap.put("bindConnId", new bindConnId());
      processMap.put("forceBindConnId", new forceBindConnId());
      processMap.put("getClientStatus", new getClientStatus());
      processMap.put("sendMsgToUser", new sendMsgToUser());
      processMap.put("sendMsgToDevType", new sendMsgToDevType());
      processMap.put("sendBroadcastMsg", new sendBroadcastMsg());
      processMap.put("sendMsgToUsers", new sendMsgToUsers());
      processMap.put("echo", new echo());
      return processMap;
    }

    public static class getConnection<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getConnection_args> {
      public getConnection() {
        super("getConnection");
      }

      public getConnection_args getEmptyArgsInstance() {
        return new getConnection_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getConnection_result getResult(I iface, getConnection_args args) throws org.apache.thrift.TException {
        getConnection_result result = new getConnection_result();
        result.success = iface.getConnection(args.logIndex, args.caller, args.ext);
        return result;
      }
    }

    public static class registerConnection<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerConnection_args> {
      public registerConnection() {
        super("registerConnection");
      }

      public registerConnection_args getEmptyArgsInstance() {
        return new registerConnection_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public registerConnection_result getResult(I iface, registerConnection_args args) throws org.apache.thrift.TException {
        registerConnection_result result = new registerConnection_result();
        result.success = iface.registerConnection(args.logIndex, args.caller, args.appId, args.userId, args.devId, args.ext);
        return result;
      }
    }

    public static class forceRegisterConnection<I extends Iface> extends org.apache.thrift.ProcessFunction<I, forceRegisterConnection_args> {
      public forceRegisterConnection() {
        super("forceRegisterConnection");
      }

      public forceRegisterConnection_args getEmptyArgsInstance() {
        return new forceRegisterConnection_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public forceRegisterConnection_result getResult(I iface, forceRegisterConnection_args args) throws org.apache.thrift.TException {
        forceRegisterConnection_result result = new forceRegisterConnection_result();
        result.success = iface.forceRegisterConnection(args.logIndex, args.caller, args.appId, args.userId, args.devId, args.ext);
        return result;
      }
    }

    public static class bindConnId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bindConnId_args> {
      public bindConnId() {
        super("bindConnId");
      }

      public bindConnId_args getEmptyArgsInstance() {
        return new bindConnId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bindConnId_result getResult(I iface, bindConnId_args args) throws org.apache.thrift.TException {
        bindConnId_result result = new bindConnId_result();
        result.success = iface.bindConnId(args.logIndex, args.caller, args.appId, args.userId, args.devId, args.connId, args.ext);
        return result;
      }
    }

    public static class forceBindConnId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, forceBindConnId_args> {
      public forceBindConnId() {
        super("forceBindConnId");
      }

      public forceBindConnId_args getEmptyArgsInstance() {
        return new forceBindConnId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public forceBindConnId_result getResult(I iface, forceBindConnId_args args) throws org.apache.thrift.TException {
        forceBindConnId_result result = new forceBindConnId_result();
        result.success = iface.forceBindConnId(args.logIndex, args.caller, args.appId, args.userId, args.devId, args.connId, args.ext);
        return result;
      }
    }

    public static class getClientStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getClientStatus_args> {
      public getClientStatus() {
        super("getClientStatus");
      }

      public getClientStatus_args getEmptyArgsInstance() {
        return new getClientStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getClientStatus_result getResult(I iface, getClientStatus_args args) throws org.apache.thrift.TException {
        getClientStatus_result result = new getClientStatus_result();
        result.success = iface.getClientStatus(args.logIndex, args.caller, args.appId, args.userId, args.devId, args.ext);
        return result;
      }
    }

    public static class sendMsgToUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendMsgToUser_args> {
      public sendMsgToUser() {
        super("sendMsgToUser");
      }

      public sendMsgToUser_args getEmptyArgsInstance() {
        return new sendMsgToUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendMsgToUser_result getResult(I iface, sendMsgToUser_args args) throws org.apache.thrift.TException {
        sendMsgToUser_result result = new sendMsgToUser_result();
        result.success = iface.sendMsgToUser(args.logIndex, args.caller, args.appId, args.userId, args.topic, args.msg, args.ext);
        return result;
      }
    }

    public static class sendMsgToDevType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendMsgToDevType_args> {
      public sendMsgToDevType() {
        super("sendMsgToDevType");
      }

      public sendMsgToDevType_args getEmptyArgsInstance() {
        return new sendMsgToDevType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendMsgToDevType_result getResult(I iface, sendMsgToDevType_args args) throws org.apache.thrift.TException {
        sendMsgToDevType_result result = new sendMsgToDevType_result();
        result.success = iface.sendMsgToDevType(args.logIndex, args.caller, args.appId, args.userId, args.devType, args.topic, args.msg, args.ext);
        return result;
      }
    }

    public static class sendBroadcastMsg<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendBroadcastMsg_args> {
      public sendBroadcastMsg() {
        super("sendBroadcastMsg");
      }

      public sendBroadcastMsg_args getEmptyArgsInstance() {
        return new sendBroadcastMsg_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendBroadcastMsg_result getResult(I iface, sendBroadcastMsg_args args) throws org.apache.thrift.TException {
        sendBroadcastMsg_result result = new sendBroadcastMsg_result();
        result.success = iface.sendBroadcastMsg(args.logIndex, args.caller, args.appId, args.topic, args.msg, args.ext);
        return result;
      }
    }

    public static class sendMsgToUsers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendMsgToUsers_args> {
      public sendMsgToUsers() {
        super("sendMsgToUsers");
      }

      public sendMsgToUsers_args getEmptyArgsInstance() {
        return new sendMsgToUsers_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendMsgToUsers_result getResult(I iface, sendMsgToUsers_args args) throws org.apache.thrift.TException {
        sendMsgToUsers_result result = new sendMsgToUsers_result();
        result.success = iface.sendMsgToUsers(args.logIndex, args.caller, args.appId, args.dstUserIds, args.topic, args.msg, args.ext);
        return result;
      }
    }

    public static class echo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, echo_args> {
      public echo() {
        super("echo");
      }

      public echo_args getEmptyArgsInstance() {
        return new echo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public echo_result getResult(I iface, echo_args args) throws org.apache.thrift.TException {
        echo_result result = new echo_result();
        result.success = iface.echo(args.logIndex, args.caller, args.srcStr, args.ext);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getConnection", new getConnection());
      processMap.put("registerConnection", new registerConnection());
      processMap.put("forceRegisterConnection", new forceRegisterConnection());
      processMap.put("bindConnId", new bindConnId());
      processMap.put("forceBindConnId", new forceBindConnId());
      processMap.put("getClientStatus", new getClientStatus());
      processMap.put("sendMsgToUser", new sendMsgToUser());
      processMap.put("sendMsgToDevType", new sendMsgToDevType());
      processMap.put("sendBroadcastMsg", new sendBroadcastMsg());
      processMap.put("sendMsgToUsers", new sendMsgToUsers());
      processMap.put("echo", new echo());
      return processMap;
    }

    public static class getConnection<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getConnection_args, ResStr> {
      public getConnection() {
        super("getConnection");
      }

      public getConnection_args getEmptyArgsInstance() {
        return new getConnection_args();
      }

      public AsyncMethodCallback<ResStr> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResStr>() { 
          public void onComplete(ResStr o) {
            getConnection_result result = new getConnection_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getConnection_result result = new getConnection_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getConnection_args args, org.apache.thrift.async.AsyncMethodCallback<ResStr> resultHandler) throws TException {
        iface.getConnection(args.logIndex, args.caller, args.ext,resultHandler);
      }
    }

    public static class registerConnection<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerConnection_args, ResStr> {
      public registerConnection() {
        super("registerConnection");
      }

      public registerConnection_args getEmptyArgsInstance() {
        return new registerConnection_args();
      }

      public AsyncMethodCallback<ResStr> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResStr>() { 
          public void onComplete(ResStr o) {
            registerConnection_result result = new registerConnection_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            registerConnection_result result = new registerConnection_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerConnection_args args, org.apache.thrift.async.AsyncMethodCallback<ResStr> resultHandler) throws TException {
        iface.registerConnection(args.logIndex, args.caller, args.appId, args.userId, args.devId, args.ext,resultHandler);
      }
    }

    public static class forceRegisterConnection<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, forceRegisterConnection_args, ResStr> {
      public forceRegisterConnection() {
        super("forceRegisterConnection");
      }

      public forceRegisterConnection_args getEmptyArgsInstance() {
        return new forceRegisterConnection_args();
      }

      public AsyncMethodCallback<ResStr> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResStr>() { 
          public void onComplete(ResStr o) {
            forceRegisterConnection_result result = new forceRegisterConnection_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            forceRegisterConnection_result result = new forceRegisterConnection_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, forceRegisterConnection_args args, org.apache.thrift.async.AsyncMethodCallback<ResStr> resultHandler) throws TException {
        iface.forceRegisterConnection(args.logIndex, args.caller, args.appId, args.userId, args.devId, args.ext,resultHandler);
      }
    }

    public static class bindConnId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bindConnId_args, ResStr> {
      public bindConnId() {
        super("bindConnId");
      }

      public bindConnId_args getEmptyArgsInstance() {
        return new bindConnId_args();
      }

      public AsyncMethodCallback<ResStr> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResStr>() { 
          public void onComplete(ResStr o) {
            bindConnId_result result = new bindConnId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bindConnId_result result = new bindConnId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bindConnId_args args, org.apache.thrift.async.AsyncMethodCallback<ResStr> resultHandler) throws TException {
        iface.bindConnId(args.logIndex, args.caller, args.appId, args.userId, args.devId, args.connId, args.ext,resultHandler);
      }
    }

    public static class forceBindConnId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, forceBindConnId_args, ResStr> {
      public forceBindConnId() {
        super("forceBindConnId");
      }

      public forceBindConnId_args getEmptyArgsInstance() {
        return new forceBindConnId_args();
      }

      public AsyncMethodCallback<ResStr> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResStr>() { 
          public void onComplete(ResStr o) {
            forceBindConnId_result result = new forceBindConnId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            forceBindConnId_result result = new forceBindConnId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, forceBindConnId_args args, org.apache.thrift.async.AsyncMethodCallback<ResStr> resultHandler) throws TException {
        iface.forceBindConnId(args.logIndex, args.caller, args.appId, args.userId, args.devId, args.connId, args.ext,resultHandler);
      }
    }

    public static class getClientStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getClientStatus_args, ResStr> {
      public getClientStatus() {
        super("getClientStatus");
      }

      public getClientStatus_args getEmptyArgsInstance() {
        return new getClientStatus_args();
      }

      public AsyncMethodCallback<ResStr> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResStr>() { 
          public void onComplete(ResStr o) {
            getClientStatus_result result = new getClientStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getClientStatus_result result = new getClientStatus_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getClientStatus_args args, org.apache.thrift.async.AsyncMethodCallback<ResStr> resultHandler) throws TException {
        iface.getClientStatus(args.logIndex, args.caller, args.appId, args.userId, args.devId, args.ext,resultHandler);
      }
    }

    public static class sendMsgToUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendMsgToUser_args, ResBool> {
      public sendMsgToUser() {
        super("sendMsgToUser");
      }

      public sendMsgToUser_args getEmptyArgsInstance() {
        return new sendMsgToUser_args();
      }

      public AsyncMethodCallback<ResBool> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResBool>() { 
          public void onComplete(ResBool o) {
            sendMsgToUser_result result = new sendMsgToUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendMsgToUser_result result = new sendMsgToUser_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendMsgToUser_args args, org.apache.thrift.async.AsyncMethodCallback<ResBool> resultHandler) throws TException {
        iface.sendMsgToUser(args.logIndex, args.caller, args.appId, args.userId, args.topic, args.msg, args.ext,resultHandler);
      }
    }

    public static class sendMsgToDevType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendMsgToDevType_args, ResBool> {
      public sendMsgToDevType() {
        super("sendMsgToDevType");
      }

      public sendMsgToDevType_args getEmptyArgsInstance() {
        return new sendMsgToDevType_args();
      }

      public AsyncMethodCallback<ResBool> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResBool>() { 
          public void onComplete(ResBool o) {
            sendMsgToDevType_result result = new sendMsgToDevType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendMsgToDevType_result result = new sendMsgToDevType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendMsgToDevType_args args, org.apache.thrift.async.AsyncMethodCallback<ResBool> resultHandler) throws TException {
        iface.sendMsgToDevType(args.logIndex, args.caller, args.appId, args.userId, args.devType, args.topic, args.msg, args.ext,resultHandler);
      }
    }

    public static class sendBroadcastMsg<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendBroadcastMsg_args, ResBool> {
      public sendBroadcastMsg() {
        super("sendBroadcastMsg");
      }

      public sendBroadcastMsg_args getEmptyArgsInstance() {
        return new sendBroadcastMsg_args();
      }

      public AsyncMethodCallback<ResBool> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResBool>() { 
          public void onComplete(ResBool o) {
            sendBroadcastMsg_result result = new sendBroadcastMsg_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendBroadcastMsg_result result = new sendBroadcastMsg_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendBroadcastMsg_args args, org.apache.thrift.async.AsyncMethodCallback<ResBool> resultHandler) throws TException {
        iface.sendBroadcastMsg(args.logIndex, args.caller, args.appId, args.topic, args.msg, args.ext,resultHandler);
      }
    }

    public static class sendMsgToUsers<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendMsgToUsers_args, ResSetStr> {
      public sendMsgToUsers() {
        super("sendMsgToUsers");
      }

      public sendMsgToUsers_args getEmptyArgsInstance() {
        return new sendMsgToUsers_args();
      }

      public AsyncMethodCallback<ResSetStr> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResSetStr>() { 
          public void onComplete(ResSetStr o) {
            sendMsgToUsers_result result = new sendMsgToUsers_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendMsgToUsers_result result = new sendMsgToUsers_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendMsgToUsers_args args, org.apache.thrift.async.AsyncMethodCallback<ResSetStr> resultHandler) throws TException {
        iface.sendMsgToUsers(args.logIndex, args.caller, args.appId, args.dstUserIds, args.topic, args.msg, args.ext,resultHandler);
      }
    }

    public static class echo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, echo_args, ResStr> {
      public echo() {
        super("echo");
      }

      public echo_args getEmptyArgsInstance() {
        return new echo_args();
      }

      public AsyncMethodCallback<ResStr> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResStr>() { 
          public void onComplete(ResStr o) {
            echo_result result = new echo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            echo_result result = new echo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, echo_args args, org.apache.thrift.async.AsyncMethodCallback<ResStr> resultHandler) throws TException {
        iface.echo(args.logIndex, args.caller, args.srcStr, args.ext,resultHandler);
      }
    }

  }

  public static class getConnection_args implements org.apache.thrift.TBase<getConnection_args, getConnection_args._Fields>, java.io.Serializable, Cloneable, Comparable<getConnection_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getConnection_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getConnection_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getConnection_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      EXT((short)3, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getConnection_args.class, metaDataMap);
    }

    public getConnection_args() {
    }

    public getConnection_args(
      long logIndex,
      String caller,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getConnection_args(getConnection_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public getConnection_args deepCopy() {
      return new getConnection_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public getConnection_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public getConnection_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public getConnection_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return Long.valueOf(getLogIndex());

      case CALLER:
        return getCaller();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getConnection_args)
        return this.equals((getConnection_args)that);
      return false;
    }

    public boolean equals(getConnection_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getConnection_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getConnection_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getConnection_argsStandardSchemeFactory implements SchemeFactory {
      public getConnection_argsStandardScheme getScheme() {
        return new getConnection_argsStandardScheme();
      }
    }

    private static class getConnection_argsStandardScheme extends StandardScheme<getConnection_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getConnection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getConnection_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getConnection_argsTupleSchemeFactory implements SchemeFactory {
      public getConnection_argsTupleScheme getScheme() {
        return new getConnection_argsTupleScheme();
      }
    }

    private static class getConnection_argsTupleScheme extends TupleScheme<getConnection_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getConnection_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetExt()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getConnection_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class getConnection_result implements org.apache.thrift.TBase<getConnection_result, getConnection_result._Fields>, java.io.Serializable, Cloneable, Comparable<getConnection_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getConnection_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getConnection_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getConnection_resultTupleSchemeFactory());
    }

    public ResStr success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResStr.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getConnection_result.class, metaDataMap);
    }

    public getConnection_result() {
    }

    public getConnection_result(
      ResStr success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getConnection_result(getConnection_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResStr(other.success);
      }
    }

    public getConnection_result deepCopy() {
      return new getConnection_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResStr getSuccess() {
      return this.success;
    }

    public getConnection_result setSuccess(ResStr success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResStr)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getConnection_result)
        return this.equals((getConnection_result)that);
      return false;
    }

    public boolean equals(getConnection_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getConnection_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getConnection_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getConnection_resultStandardSchemeFactory implements SchemeFactory {
      public getConnection_resultStandardScheme getScheme() {
        return new getConnection_resultStandardScheme();
      }
    }

    private static class getConnection_resultStandardScheme extends StandardScheme<getConnection_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getConnection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResStr();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getConnection_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getConnection_resultTupleSchemeFactory implements SchemeFactory {
      public getConnection_resultTupleScheme getScheme() {
        return new getConnection_resultTupleScheme();
      }
    }

    private static class getConnection_resultTupleScheme extends TupleScheme<getConnection_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getConnection_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getConnection_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResStr();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class registerConnection_args implements org.apache.thrift.TBase<registerConnection_args, registerConnection_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerConnection_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerConnection_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DEV_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("devId", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerConnection_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerConnection_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String appId; // required
    public String userId; // required
    public String devId; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      APP_ID((short)3, "appId"),
      USER_ID((short)4, "userId"),
      DEV_ID((short)5, "devId"),
      EXT((short)6, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // APP_ID
            return APP_ID;
          case 4: // USER_ID
            return USER_ID;
          case 5: // DEV_ID
            return DEV_ID;
          case 6: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEV_ID, new org.apache.thrift.meta_data.FieldMetaData("devId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerConnection_args.class, metaDataMap);
    }

    public registerConnection_args() {
    }

    public registerConnection_args(
      long logIndex,
      String caller,
      String appId,
      String userId,
      String devId,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.appId = appId;
      this.userId = userId;
      this.devId = devId;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerConnection_args(registerConnection_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetAppId()) {
        this.appId = other.appId;
      }
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetDevId()) {
        this.devId = other.devId;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public registerConnection_args deepCopy() {
      return new registerConnection_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.appId = null;
      this.userId = null;
      this.devId = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public registerConnection_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public registerConnection_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getAppId() {
      return this.appId;
    }

    public registerConnection_args setAppId(String appId) {
      this.appId = appId;
      return this;
    }

    public void unsetAppId() {
      this.appId = null;
    }

    /** Returns true if field appId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppId() {
      return this.appId != null;
    }

    public void setAppIdIsSet(boolean value) {
      if (!value) {
        this.appId = null;
      }
    }

    public String getUserId() {
      return this.userId;
    }

    public registerConnection_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public String getDevId() {
      return this.devId;
    }

    public registerConnection_args setDevId(String devId) {
      this.devId = devId;
      return this;
    }

    public void unsetDevId() {
      this.devId = null;
    }

    /** Returns true if field devId is set (has been assigned a value) and false otherwise */
    public boolean isSetDevId() {
      return this.devId != null;
    }

    public void setDevIdIsSet(boolean value) {
      if (!value) {
        this.devId = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public registerConnection_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case APP_ID:
        if (value == null) {
          unsetAppId();
        } else {
          setAppId((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case DEV_ID:
        if (value == null) {
          unsetDevId();
        } else {
          setDevId((String)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return Long.valueOf(getLogIndex());

      case CALLER:
        return getCaller();

      case APP_ID:
        return getAppId();

      case USER_ID:
        return getUserId();

      case DEV_ID:
        return getDevId();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case APP_ID:
        return isSetAppId();
      case USER_ID:
        return isSetUserId();
      case DEV_ID:
        return isSetDevId();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerConnection_args)
        return this.equals((registerConnection_args)that);
      return false;
    }

    public boolean equals(registerConnection_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_appId = true && this.isSetAppId();
      boolean that_present_appId = true && that.isSetAppId();
      if (this_present_appId || that_present_appId) {
        if (!(this_present_appId && that_present_appId))
          return false;
        if (!this.appId.equals(that.appId))
          return false;
      }

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_devId = true && this.isSetDevId();
      boolean that_present_devId = true && that.isSetDevId();
      if (this_present_devId || that_present_devId) {
        if (!(this_present_devId && that_present_devId))
          return false;
        if (!this.devId.equals(that.devId))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(registerConnection_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDevId()).compareTo(other.isSetDevId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.devId, other.devId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerConnection_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appId:");
      if (this.appId == null) {
        sb.append("null");
      } else {
        sb.append(this.appId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("devId:");
      if (this.devId == null) {
        sb.append("null");
      } else {
        sb.append(this.devId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerConnection_argsStandardSchemeFactory implements SchemeFactory {
      public registerConnection_argsStandardScheme getScheme() {
        return new registerConnection_argsStandardScheme();
      }
    }

    private static class registerConnection_argsStandardScheme extends StandardScheme<registerConnection_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerConnection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appId = iprot.readString();
                struct.setAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DEV_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.devId = iprot.readString();
                struct.setDevIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerConnection_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.appId != null) {
          oprot.writeFieldBegin(APP_ID_FIELD_DESC);
          oprot.writeString(struct.appId);
          oprot.writeFieldEnd();
        }
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.devId != null) {
          oprot.writeFieldBegin(DEV_ID_FIELD_DESC);
          oprot.writeString(struct.devId);
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerConnection_argsTupleSchemeFactory implements SchemeFactory {
      public registerConnection_argsTupleScheme getScheme() {
        return new registerConnection_argsTupleScheme();
      }
    }

    private static class registerConnection_argsTupleScheme extends TupleScheme<registerConnection_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerConnection_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetAppId()) {
          optionals.set(2);
        }
        if (struct.isSetUserId()) {
          optionals.set(3);
        }
        if (struct.isSetDevId()) {
          optionals.set(4);
        }
        if (struct.isSetExt()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetAppId()) {
          oprot.writeString(struct.appId);
        }
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetDevId()) {
          oprot.writeString(struct.devId);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerConnection_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.appId = iprot.readString();
          struct.setAppIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.devId = iprot.readString();
          struct.setDevIdIsSet(true);
        }
        if (incoming.get(5)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class registerConnection_result implements org.apache.thrift.TBase<registerConnection_result, registerConnection_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerConnection_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerConnection_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerConnection_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerConnection_resultTupleSchemeFactory());
    }

    public ResStr success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResStr.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerConnection_result.class, metaDataMap);
    }

    public registerConnection_result() {
    }

    public registerConnection_result(
      ResStr success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerConnection_result(registerConnection_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResStr(other.success);
      }
    }

    public registerConnection_result deepCopy() {
      return new registerConnection_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResStr getSuccess() {
      return this.success;
    }

    public registerConnection_result setSuccess(ResStr success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResStr)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerConnection_result)
        return this.equals((registerConnection_result)that);
      return false;
    }

    public boolean equals(registerConnection_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(registerConnection_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerConnection_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerConnection_resultStandardSchemeFactory implements SchemeFactory {
      public registerConnection_resultStandardScheme getScheme() {
        return new registerConnection_resultStandardScheme();
      }
    }

    private static class registerConnection_resultStandardScheme extends StandardScheme<registerConnection_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerConnection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResStr();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerConnection_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerConnection_resultTupleSchemeFactory implements SchemeFactory {
      public registerConnection_resultTupleScheme getScheme() {
        return new registerConnection_resultTupleScheme();
      }
    }

    private static class registerConnection_resultTupleScheme extends TupleScheme<registerConnection_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerConnection_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerConnection_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResStr();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class forceRegisterConnection_args implements org.apache.thrift.TBase<forceRegisterConnection_args, forceRegisterConnection_args._Fields>, java.io.Serializable, Cloneable, Comparable<forceRegisterConnection_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("forceRegisterConnection_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DEV_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("devId", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new forceRegisterConnection_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new forceRegisterConnection_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String appId; // required
    public String userId; // required
    public String devId; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      APP_ID((short)3, "appId"),
      USER_ID((short)4, "userId"),
      DEV_ID((short)5, "devId"),
      EXT((short)6, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // APP_ID
            return APP_ID;
          case 4: // USER_ID
            return USER_ID;
          case 5: // DEV_ID
            return DEV_ID;
          case 6: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEV_ID, new org.apache.thrift.meta_data.FieldMetaData("devId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(forceRegisterConnection_args.class, metaDataMap);
    }

    public forceRegisterConnection_args() {
    }

    public forceRegisterConnection_args(
      long logIndex,
      String caller,
      String appId,
      String userId,
      String devId,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.appId = appId;
      this.userId = userId;
      this.devId = devId;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public forceRegisterConnection_args(forceRegisterConnection_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetAppId()) {
        this.appId = other.appId;
      }
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetDevId()) {
        this.devId = other.devId;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public forceRegisterConnection_args deepCopy() {
      return new forceRegisterConnection_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.appId = null;
      this.userId = null;
      this.devId = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public forceRegisterConnection_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public forceRegisterConnection_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getAppId() {
      return this.appId;
    }

    public forceRegisterConnection_args setAppId(String appId) {
      this.appId = appId;
      return this;
    }

    public void unsetAppId() {
      this.appId = null;
    }

    /** Returns true if field appId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppId() {
      return this.appId != null;
    }

    public void setAppIdIsSet(boolean value) {
      if (!value) {
        this.appId = null;
      }
    }

    public String getUserId() {
      return this.userId;
    }

    public forceRegisterConnection_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public String getDevId() {
      return this.devId;
    }

    public forceRegisterConnection_args setDevId(String devId) {
      this.devId = devId;
      return this;
    }

    public void unsetDevId() {
      this.devId = null;
    }

    /** Returns true if field devId is set (has been assigned a value) and false otherwise */
    public boolean isSetDevId() {
      return this.devId != null;
    }

    public void setDevIdIsSet(boolean value) {
      if (!value) {
        this.devId = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public forceRegisterConnection_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case APP_ID:
        if (value == null) {
          unsetAppId();
        } else {
          setAppId((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case DEV_ID:
        if (value == null) {
          unsetDevId();
        } else {
          setDevId((String)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return Long.valueOf(getLogIndex());

      case CALLER:
        return getCaller();

      case APP_ID:
        return getAppId();

      case USER_ID:
        return getUserId();

      case DEV_ID:
        return getDevId();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case APP_ID:
        return isSetAppId();
      case USER_ID:
        return isSetUserId();
      case DEV_ID:
        return isSetDevId();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof forceRegisterConnection_args)
        return this.equals((forceRegisterConnection_args)that);
      return false;
    }

    public boolean equals(forceRegisterConnection_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_appId = true && this.isSetAppId();
      boolean that_present_appId = true && that.isSetAppId();
      if (this_present_appId || that_present_appId) {
        if (!(this_present_appId && that_present_appId))
          return false;
        if (!this.appId.equals(that.appId))
          return false;
      }

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_devId = true && this.isSetDevId();
      boolean that_present_devId = true && that.isSetDevId();
      if (this_present_devId || that_present_devId) {
        if (!(this_present_devId && that_present_devId))
          return false;
        if (!this.devId.equals(that.devId))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(forceRegisterConnection_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDevId()).compareTo(other.isSetDevId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.devId, other.devId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("forceRegisterConnection_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appId:");
      if (this.appId == null) {
        sb.append("null");
      } else {
        sb.append(this.appId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("devId:");
      if (this.devId == null) {
        sb.append("null");
      } else {
        sb.append(this.devId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class forceRegisterConnection_argsStandardSchemeFactory implements SchemeFactory {
      public forceRegisterConnection_argsStandardScheme getScheme() {
        return new forceRegisterConnection_argsStandardScheme();
      }
    }

    private static class forceRegisterConnection_argsStandardScheme extends StandardScheme<forceRegisterConnection_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, forceRegisterConnection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appId = iprot.readString();
                struct.setAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DEV_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.devId = iprot.readString();
                struct.setDevIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, forceRegisterConnection_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.appId != null) {
          oprot.writeFieldBegin(APP_ID_FIELD_DESC);
          oprot.writeString(struct.appId);
          oprot.writeFieldEnd();
        }
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.devId != null) {
          oprot.writeFieldBegin(DEV_ID_FIELD_DESC);
          oprot.writeString(struct.devId);
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class forceRegisterConnection_argsTupleSchemeFactory implements SchemeFactory {
      public forceRegisterConnection_argsTupleScheme getScheme() {
        return new forceRegisterConnection_argsTupleScheme();
      }
    }

    private static class forceRegisterConnection_argsTupleScheme extends TupleScheme<forceRegisterConnection_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, forceRegisterConnection_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetAppId()) {
          optionals.set(2);
        }
        if (struct.isSetUserId()) {
          optionals.set(3);
        }
        if (struct.isSetDevId()) {
          optionals.set(4);
        }
        if (struct.isSetExt()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetAppId()) {
          oprot.writeString(struct.appId);
        }
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetDevId()) {
          oprot.writeString(struct.devId);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, forceRegisterConnection_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.appId = iprot.readString();
          struct.setAppIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.devId = iprot.readString();
          struct.setDevIdIsSet(true);
        }
        if (incoming.get(5)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class forceRegisterConnection_result implements org.apache.thrift.TBase<forceRegisterConnection_result, forceRegisterConnection_result._Fields>, java.io.Serializable, Cloneable, Comparable<forceRegisterConnection_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("forceRegisterConnection_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new forceRegisterConnection_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new forceRegisterConnection_resultTupleSchemeFactory());
    }

    public ResStr success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResStr.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(forceRegisterConnection_result.class, metaDataMap);
    }

    public forceRegisterConnection_result() {
    }

    public forceRegisterConnection_result(
      ResStr success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public forceRegisterConnection_result(forceRegisterConnection_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResStr(other.success);
      }
    }

    public forceRegisterConnection_result deepCopy() {
      return new forceRegisterConnection_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResStr getSuccess() {
      return this.success;
    }

    public forceRegisterConnection_result setSuccess(ResStr success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResStr)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof forceRegisterConnection_result)
        return this.equals((forceRegisterConnection_result)that);
      return false;
    }

    public boolean equals(forceRegisterConnection_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(forceRegisterConnection_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("forceRegisterConnection_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class forceRegisterConnection_resultStandardSchemeFactory implements SchemeFactory {
      public forceRegisterConnection_resultStandardScheme getScheme() {
        return new forceRegisterConnection_resultStandardScheme();
      }
    }

    private static class forceRegisterConnection_resultStandardScheme extends StandardScheme<forceRegisterConnection_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, forceRegisterConnection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResStr();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, forceRegisterConnection_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class forceRegisterConnection_resultTupleSchemeFactory implements SchemeFactory {
      public forceRegisterConnection_resultTupleScheme getScheme() {
        return new forceRegisterConnection_resultTupleScheme();
      }
    }

    private static class forceRegisterConnection_resultTupleScheme extends TupleScheme<forceRegisterConnection_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, forceRegisterConnection_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, forceRegisterConnection_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResStr();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class bindConnId_args implements org.apache.thrift.TBase<bindConnId_args, bindConnId_args._Fields>, java.io.Serializable, Cloneable, Comparable<bindConnId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bindConnId_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DEV_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("devId", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField CONN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("connId", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bindConnId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bindConnId_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String appId; // required
    public String userId; // required
    public String devId; // required
    public String connId; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      APP_ID((short)3, "appId"),
      USER_ID((short)4, "userId"),
      DEV_ID((short)5, "devId"),
      CONN_ID((short)6, "connId"),
      EXT((short)7, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // APP_ID
            return APP_ID;
          case 4: // USER_ID
            return USER_ID;
          case 5: // DEV_ID
            return DEV_ID;
          case 6: // CONN_ID
            return CONN_ID;
          case 7: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEV_ID, new org.apache.thrift.meta_data.FieldMetaData("devId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONN_ID, new org.apache.thrift.meta_data.FieldMetaData("connId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bindConnId_args.class, metaDataMap);
    }

    public bindConnId_args() {
    }

    public bindConnId_args(
      long logIndex,
      String caller,
      String appId,
      String userId,
      String devId,
      String connId,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.appId = appId;
      this.userId = userId;
      this.devId = devId;
      this.connId = connId;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bindConnId_args(bindConnId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetAppId()) {
        this.appId = other.appId;
      }
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetDevId()) {
        this.devId = other.devId;
      }
      if (other.isSetConnId()) {
        this.connId = other.connId;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public bindConnId_args deepCopy() {
      return new bindConnId_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.appId = null;
      this.userId = null;
      this.devId = null;
      this.connId = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public bindConnId_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public bindConnId_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getAppId() {
      return this.appId;
    }

    public bindConnId_args setAppId(String appId) {
      this.appId = appId;
      return this;
    }

    public void unsetAppId() {
      this.appId = null;
    }

    /** Returns true if field appId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppId() {
      return this.appId != null;
    }

    public void setAppIdIsSet(boolean value) {
      if (!value) {
        this.appId = null;
      }
    }

    public String getUserId() {
      return this.userId;
    }

    public bindConnId_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public String getDevId() {
      return this.devId;
    }

    public bindConnId_args setDevId(String devId) {
      this.devId = devId;
      return this;
    }

    public void unsetDevId() {
      this.devId = null;
    }

    /** Returns true if field devId is set (has been assigned a value) and false otherwise */
    public boolean isSetDevId() {
      return this.devId != null;
    }

    public void setDevIdIsSet(boolean value) {
      if (!value) {
        this.devId = null;
      }
    }

    public String getConnId() {
      return this.connId;
    }

    public bindConnId_args setConnId(String connId) {
      this.connId = connId;
      return this;
    }

    public void unsetConnId() {
      this.connId = null;
    }

    /** Returns true if field connId is set (has been assigned a value) and false otherwise */
    public boolean isSetConnId() {
      return this.connId != null;
    }

    public void setConnIdIsSet(boolean value) {
      if (!value) {
        this.connId = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public bindConnId_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case APP_ID:
        if (value == null) {
          unsetAppId();
        } else {
          setAppId((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case DEV_ID:
        if (value == null) {
          unsetDevId();
        } else {
          setDevId((String)value);
        }
        break;

      case CONN_ID:
        if (value == null) {
          unsetConnId();
        } else {
          setConnId((String)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return Long.valueOf(getLogIndex());

      case CALLER:
        return getCaller();

      case APP_ID:
        return getAppId();

      case USER_ID:
        return getUserId();

      case DEV_ID:
        return getDevId();

      case CONN_ID:
        return getConnId();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case APP_ID:
        return isSetAppId();
      case USER_ID:
        return isSetUserId();
      case DEV_ID:
        return isSetDevId();
      case CONN_ID:
        return isSetConnId();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bindConnId_args)
        return this.equals((bindConnId_args)that);
      return false;
    }

    public boolean equals(bindConnId_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_appId = true && this.isSetAppId();
      boolean that_present_appId = true && that.isSetAppId();
      if (this_present_appId || that_present_appId) {
        if (!(this_present_appId && that_present_appId))
          return false;
        if (!this.appId.equals(that.appId))
          return false;
      }

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_devId = true && this.isSetDevId();
      boolean that_present_devId = true && that.isSetDevId();
      if (this_present_devId || that_present_devId) {
        if (!(this_present_devId && that_present_devId))
          return false;
        if (!this.devId.equals(that.devId))
          return false;
      }

      boolean this_present_connId = true && this.isSetConnId();
      boolean that_present_connId = true && that.isSetConnId();
      if (this_present_connId || that_present_connId) {
        if (!(this_present_connId && that_present_connId))
          return false;
        if (!this.connId.equals(that.connId))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(bindConnId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDevId()).compareTo(other.isSetDevId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.devId, other.devId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConnId()).compareTo(other.isSetConnId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connId, other.connId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bindConnId_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appId:");
      if (this.appId == null) {
        sb.append("null");
      } else {
        sb.append(this.appId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("devId:");
      if (this.devId == null) {
        sb.append("null");
      } else {
        sb.append(this.devId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("connId:");
      if (this.connId == null) {
        sb.append("null");
      } else {
        sb.append(this.connId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bindConnId_argsStandardSchemeFactory implements SchemeFactory {
      public bindConnId_argsStandardScheme getScheme() {
        return new bindConnId_argsStandardScheme();
      }
    }

    private static class bindConnId_argsStandardScheme extends StandardScheme<bindConnId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bindConnId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appId = iprot.readString();
                struct.setAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DEV_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.devId = iprot.readString();
                struct.setDevIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // CONN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.connId = iprot.readString();
                struct.setConnIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bindConnId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.appId != null) {
          oprot.writeFieldBegin(APP_ID_FIELD_DESC);
          oprot.writeString(struct.appId);
          oprot.writeFieldEnd();
        }
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.devId != null) {
          oprot.writeFieldBegin(DEV_ID_FIELD_DESC);
          oprot.writeString(struct.devId);
          oprot.writeFieldEnd();
        }
        if (struct.connId != null) {
          oprot.writeFieldBegin(CONN_ID_FIELD_DESC);
          oprot.writeString(struct.connId);
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bindConnId_argsTupleSchemeFactory implements SchemeFactory {
      public bindConnId_argsTupleScheme getScheme() {
        return new bindConnId_argsTupleScheme();
      }
    }

    private static class bindConnId_argsTupleScheme extends TupleScheme<bindConnId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bindConnId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetAppId()) {
          optionals.set(2);
        }
        if (struct.isSetUserId()) {
          optionals.set(3);
        }
        if (struct.isSetDevId()) {
          optionals.set(4);
        }
        if (struct.isSetConnId()) {
          optionals.set(5);
        }
        if (struct.isSetExt()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetAppId()) {
          oprot.writeString(struct.appId);
        }
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetDevId()) {
          oprot.writeString(struct.devId);
        }
        if (struct.isSetConnId()) {
          oprot.writeString(struct.connId);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bindConnId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.appId = iprot.readString();
          struct.setAppIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.devId = iprot.readString();
          struct.setDevIdIsSet(true);
        }
        if (incoming.get(5)) {
          struct.connId = iprot.readString();
          struct.setConnIdIsSet(true);
        }
        if (incoming.get(6)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class bindConnId_result implements org.apache.thrift.TBase<bindConnId_result, bindConnId_result._Fields>, java.io.Serializable, Cloneable, Comparable<bindConnId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bindConnId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bindConnId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bindConnId_resultTupleSchemeFactory());
    }

    public ResStr success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResStr.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bindConnId_result.class, metaDataMap);
    }

    public bindConnId_result() {
    }

    public bindConnId_result(
      ResStr success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bindConnId_result(bindConnId_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResStr(other.success);
      }
    }

    public bindConnId_result deepCopy() {
      return new bindConnId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResStr getSuccess() {
      return this.success;
    }

    public bindConnId_result setSuccess(ResStr success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResStr)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bindConnId_result)
        return this.equals((bindConnId_result)that);
      return false;
    }

    public boolean equals(bindConnId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(bindConnId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bindConnId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bindConnId_resultStandardSchemeFactory implements SchemeFactory {
      public bindConnId_resultStandardScheme getScheme() {
        return new bindConnId_resultStandardScheme();
      }
    }

    private static class bindConnId_resultStandardScheme extends StandardScheme<bindConnId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bindConnId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResStr();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bindConnId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bindConnId_resultTupleSchemeFactory implements SchemeFactory {
      public bindConnId_resultTupleScheme getScheme() {
        return new bindConnId_resultTupleScheme();
      }
    }

    private static class bindConnId_resultTupleScheme extends TupleScheme<bindConnId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bindConnId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bindConnId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResStr();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class forceBindConnId_args implements org.apache.thrift.TBase<forceBindConnId_args, forceBindConnId_args._Fields>, java.io.Serializable, Cloneable, Comparable<forceBindConnId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("forceBindConnId_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DEV_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("devId", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField CONN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("connId", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new forceBindConnId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new forceBindConnId_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String appId; // required
    public String userId; // required
    public String devId; // required
    public String connId; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      APP_ID((short)3, "appId"),
      USER_ID((short)4, "userId"),
      DEV_ID((short)5, "devId"),
      CONN_ID((short)6, "connId"),
      EXT((short)7, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // APP_ID
            return APP_ID;
          case 4: // USER_ID
            return USER_ID;
          case 5: // DEV_ID
            return DEV_ID;
          case 6: // CONN_ID
            return CONN_ID;
          case 7: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEV_ID, new org.apache.thrift.meta_data.FieldMetaData("devId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONN_ID, new org.apache.thrift.meta_data.FieldMetaData("connId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(forceBindConnId_args.class, metaDataMap);
    }

    public forceBindConnId_args() {
    }

    public forceBindConnId_args(
      long logIndex,
      String caller,
      String appId,
      String userId,
      String devId,
      String connId,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.appId = appId;
      this.userId = userId;
      this.devId = devId;
      this.connId = connId;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public forceBindConnId_args(forceBindConnId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetAppId()) {
        this.appId = other.appId;
      }
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetDevId()) {
        this.devId = other.devId;
      }
      if (other.isSetConnId()) {
        this.connId = other.connId;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public forceBindConnId_args deepCopy() {
      return new forceBindConnId_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.appId = null;
      this.userId = null;
      this.devId = null;
      this.connId = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public forceBindConnId_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public forceBindConnId_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getAppId() {
      return this.appId;
    }

    public forceBindConnId_args setAppId(String appId) {
      this.appId = appId;
      return this;
    }

    public void unsetAppId() {
      this.appId = null;
    }

    /** Returns true if field appId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppId() {
      return this.appId != null;
    }

    public void setAppIdIsSet(boolean value) {
      if (!value) {
        this.appId = null;
      }
    }

    public String getUserId() {
      return this.userId;
    }

    public forceBindConnId_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public String getDevId() {
      return this.devId;
    }

    public forceBindConnId_args setDevId(String devId) {
      this.devId = devId;
      return this;
    }

    public void unsetDevId() {
      this.devId = null;
    }

    /** Returns true if field devId is set (has been assigned a value) and false otherwise */
    public boolean isSetDevId() {
      return this.devId != null;
    }

    public void setDevIdIsSet(boolean value) {
      if (!value) {
        this.devId = null;
      }
    }

    public String getConnId() {
      return this.connId;
    }

    public forceBindConnId_args setConnId(String connId) {
      this.connId = connId;
      return this;
    }

    public void unsetConnId() {
      this.connId = null;
    }

    /** Returns true if field connId is set (has been assigned a value) and false otherwise */
    public boolean isSetConnId() {
      return this.connId != null;
    }

    public void setConnIdIsSet(boolean value) {
      if (!value) {
        this.connId = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public forceBindConnId_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case APP_ID:
        if (value == null) {
          unsetAppId();
        } else {
          setAppId((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case DEV_ID:
        if (value == null) {
          unsetDevId();
        } else {
          setDevId((String)value);
        }
        break;

      case CONN_ID:
        if (value == null) {
          unsetConnId();
        } else {
          setConnId((String)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return Long.valueOf(getLogIndex());

      case CALLER:
        return getCaller();

      case APP_ID:
        return getAppId();

      case USER_ID:
        return getUserId();

      case DEV_ID:
        return getDevId();

      case CONN_ID:
        return getConnId();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case APP_ID:
        return isSetAppId();
      case USER_ID:
        return isSetUserId();
      case DEV_ID:
        return isSetDevId();
      case CONN_ID:
        return isSetConnId();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof forceBindConnId_args)
        return this.equals((forceBindConnId_args)that);
      return false;
    }

    public boolean equals(forceBindConnId_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_appId = true && this.isSetAppId();
      boolean that_present_appId = true && that.isSetAppId();
      if (this_present_appId || that_present_appId) {
        if (!(this_present_appId && that_present_appId))
          return false;
        if (!this.appId.equals(that.appId))
          return false;
      }

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_devId = true && this.isSetDevId();
      boolean that_present_devId = true && that.isSetDevId();
      if (this_present_devId || that_present_devId) {
        if (!(this_present_devId && that_present_devId))
          return false;
        if (!this.devId.equals(that.devId))
          return false;
      }

      boolean this_present_connId = true && this.isSetConnId();
      boolean that_present_connId = true && that.isSetConnId();
      if (this_present_connId || that_present_connId) {
        if (!(this_present_connId && that_present_connId))
          return false;
        if (!this.connId.equals(that.connId))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(forceBindConnId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDevId()).compareTo(other.isSetDevId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.devId, other.devId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConnId()).compareTo(other.isSetConnId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connId, other.connId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("forceBindConnId_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appId:");
      if (this.appId == null) {
        sb.append("null");
      } else {
        sb.append(this.appId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("devId:");
      if (this.devId == null) {
        sb.append("null");
      } else {
        sb.append(this.devId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("connId:");
      if (this.connId == null) {
        sb.append("null");
      } else {
        sb.append(this.connId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class forceBindConnId_argsStandardSchemeFactory implements SchemeFactory {
      public forceBindConnId_argsStandardScheme getScheme() {
        return new forceBindConnId_argsStandardScheme();
      }
    }

    private static class forceBindConnId_argsStandardScheme extends StandardScheme<forceBindConnId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, forceBindConnId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appId = iprot.readString();
                struct.setAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DEV_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.devId = iprot.readString();
                struct.setDevIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // CONN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.connId = iprot.readString();
                struct.setConnIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, forceBindConnId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.appId != null) {
          oprot.writeFieldBegin(APP_ID_FIELD_DESC);
          oprot.writeString(struct.appId);
          oprot.writeFieldEnd();
        }
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.devId != null) {
          oprot.writeFieldBegin(DEV_ID_FIELD_DESC);
          oprot.writeString(struct.devId);
          oprot.writeFieldEnd();
        }
        if (struct.connId != null) {
          oprot.writeFieldBegin(CONN_ID_FIELD_DESC);
          oprot.writeString(struct.connId);
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class forceBindConnId_argsTupleSchemeFactory implements SchemeFactory {
      public forceBindConnId_argsTupleScheme getScheme() {
        return new forceBindConnId_argsTupleScheme();
      }
    }

    private static class forceBindConnId_argsTupleScheme extends TupleScheme<forceBindConnId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, forceBindConnId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetAppId()) {
          optionals.set(2);
        }
        if (struct.isSetUserId()) {
          optionals.set(3);
        }
        if (struct.isSetDevId()) {
          optionals.set(4);
        }
        if (struct.isSetConnId()) {
          optionals.set(5);
        }
        if (struct.isSetExt()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetAppId()) {
          oprot.writeString(struct.appId);
        }
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetDevId()) {
          oprot.writeString(struct.devId);
        }
        if (struct.isSetConnId()) {
          oprot.writeString(struct.connId);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, forceBindConnId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.appId = iprot.readString();
          struct.setAppIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.devId = iprot.readString();
          struct.setDevIdIsSet(true);
        }
        if (incoming.get(5)) {
          struct.connId = iprot.readString();
          struct.setConnIdIsSet(true);
        }
        if (incoming.get(6)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class forceBindConnId_result implements org.apache.thrift.TBase<forceBindConnId_result, forceBindConnId_result._Fields>, java.io.Serializable, Cloneable, Comparable<forceBindConnId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("forceBindConnId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new forceBindConnId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new forceBindConnId_resultTupleSchemeFactory());
    }

    public ResStr success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResStr.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(forceBindConnId_result.class, metaDataMap);
    }

    public forceBindConnId_result() {
    }

    public forceBindConnId_result(
      ResStr success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public forceBindConnId_result(forceBindConnId_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResStr(other.success);
      }
    }

    public forceBindConnId_result deepCopy() {
      return new forceBindConnId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResStr getSuccess() {
      return this.success;
    }

    public forceBindConnId_result setSuccess(ResStr success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResStr)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof forceBindConnId_result)
        return this.equals((forceBindConnId_result)that);
      return false;
    }

    public boolean equals(forceBindConnId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(forceBindConnId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("forceBindConnId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class forceBindConnId_resultStandardSchemeFactory implements SchemeFactory {
      public forceBindConnId_resultStandardScheme getScheme() {
        return new forceBindConnId_resultStandardScheme();
      }
    }

    private static class forceBindConnId_resultStandardScheme extends StandardScheme<forceBindConnId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, forceBindConnId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResStr();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, forceBindConnId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class forceBindConnId_resultTupleSchemeFactory implements SchemeFactory {
      public forceBindConnId_resultTupleScheme getScheme() {
        return new forceBindConnId_resultTupleScheme();
      }
    }

    private static class forceBindConnId_resultTupleScheme extends TupleScheme<forceBindConnId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, forceBindConnId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, forceBindConnId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResStr();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getClientStatus_args implements org.apache.thrift.TBase<getClientStatus_args, getClientStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<getClientStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getClientStatus_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DEV_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("devId", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getClientStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getClientStatus_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String appId; // required
    public String userId; // required
    public String devId; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      APP_ID((short)3, "appId"),
      USER_ID((short)4, "userId"),
      DEV_ID((short)5, "devId"),
      EXT((short)6, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // APP_ID
            return APP_ID;
          case 4: // USER_ID
            return USER_ID;
          case 5: // DEV_ID
            return DEV_ID;
          case 6: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEV_ID, new org.apache.thrift.meta_data.FieldMetaData("devId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getClientStatus_args.class, metaDataMap);
    }

    public getClientStatus_args() {
    }

    public getClientStatus_args(
      long logIndex,
      String caller,
      String appId,
      String userId,
      String devId,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.appId = appId;
      this.userId = userId;
      this.devId = devId;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getClientStatus_args(getClientStatus_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetAppId()) {
        this.appId = other.appId;
      }
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetDevId()) {
        this.devId = other.devId;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public getClientStatus_args deepCopy() {
      return new getClientStatus_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.appId = null;
      this.userId = null;
      this.devId = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public getClientStatus_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public getClientStatus_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getAppId() {
      return this.appId;
    }

    public getClientStatus_args setAppId(String appId) {
      this.appId = appId;
      return this;
    }

    public void unsetAppId() {
      this.appId = null;
    }

    /** Returns true if field appId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppId() {
      return this.appId != null;
    }

    public void setAppIdIsSet(boolean value) {
      if (!value) {
        this.appId = null;
      }
    }

    public String getUserId() {
      return this.userId;
    }

    public getClientStatus_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public String getDevId() {
      return this.devId;
    }

    public getClientStatus_args setDevId(String devId) {
      this.devId = devId;
      return this;
    }

    public void unsetDevId() {
      this.devId = null;
    }

    /** Returns true if field devId is set (has been assigned a value) and false otherwise */
    public boolean isSetDevId() {
      return this.devId != null;
    }

    public void setDevIdIsSet(boolean value) {
      if (!value) {
        this.devId = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public getClientStatus_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case APP_ID:
        if (value == null) {
          unsetAppId();
        } else {
          setAppId((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case DEV_ID:
        if (value == null) {
          unsetDevId();
        } else {
          setDevId((String)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return Long.valueOf(getLogIndex());

      case CALLER:
        return getCaller();

      case APP_ID:
        return getAppId();

      case USER_ID:
        return getUserId();

      case DEV_ID:
        return getDevId();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case APP_ID:
        return isSetAppId();
      case USER_ID:
        return isSetUserId();
      case DEV_ID:
        return isSetDevId();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getClientStatus_args)
        return this.equals((getClientStatus_args)that);
      return false;
    }

    public boolean equals(getClientStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_appId = true && this.isSetAppId();
      boolean that_present_appId = true && that.isSetAppId();
      if (this_present_appId || that_present_appId) {
        if (!(this_present_appId && that_present_appId))
          return false;
        if (!this.appId.equals(that.appId))
          return false;
      }

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_devId = true && this.isSetDevId();
      boolean that_present_devId = true && that.isSetDevId();
      if (this_present_devId || that_present_devId) {
        if (!(this_present_devId && that_present_devId))
          return false;
        if (!this.devId.equals(that.devId))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getClientStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDevId()).compareTo(other.isSetDevId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.devId, other.devId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getClientStatus_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appId:");
      if (this.appId == null) {
        sb.append("null");
      } else {
        sb.append(this.appId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("devId:");
      if (this.devId == null) {
        sb.append("null");
      } else {
        sb.append(this.devId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClientStatus_argsStandardSchemeFactory implements SchemeFactory {
      public getClientStatus_argsStandardScheme getScheme() {
        return new getClientStatus_argsStandardScheme();
      }
    }

    private static class getClientStatus_argsStandardScheme extends StandardScheme<getClientStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getClientStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appId = iprot.readString();
                struct.setAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DEV_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.devId = iprot.readString();
                struct.setDevIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getClientStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.appId != null) {
          oprot.writeFieldBegin(APP_ID_FIELD_DESC);
          oprot.writeString(struct.appId);
          oprot.writeFieldEnd();
        }
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.devId != null) {
          oprot.writeFieldBegin(DEV_ID_FIELD_DESC);
          oprot.writeString(struct.devId);
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClientStatus_argsTupleSchemeFactory implements SchemeFactory {
      public getClientStatus_argsTupleScheme getScheme() {
        return new getClientStatus_argsTupleScheme();
      }
    }

    private static class getClientStatus_argsTupleScheme extends TupleScheme<getClientStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getClientStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetAppId()) {
          optionals.set(2);
        }
        if (struct.isSetUserId()) {
          optionals.set(3);
        }
        if (struct.isSetDevId()) {
          optionals.set(4);
        }
        if (struct.isSetExt()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetAppId()) {
          oprot.writeString(struct.appId);
        }
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetDevId()) {
          oprot.writeString(struct.devId);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getClientStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.appId = iprot.readString();
          struct.setAppIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.devId = iprot.readString();
          struct.setDevIdIsSet(true);
        }
        if (incoming.get(5)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class getClientStatus_result implements org.apache.thrift.TBase<getClientStatus_result, getClientStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<getClientStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getClientStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getClientStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getClientStatus_resultTupleSchemeFactory());
    }

    public ResStr success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResStr.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getClientStatus_result.class, metaDataMap);
    }

    public getClientStatus_result() {
    }

    public getClientStatus_result(
      ResStr success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getClientStatus_result(getClientStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResStr(other.success);
      }
    }

    public getClientStatus_result deepCopy() {
      return new getClientStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResStr getSuccess() {
      return this.success;
    }

    public getClientStatus_result setSuccess(ResStr success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResStr)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getClientStatus_result)
        return this.equals((getClientStatus_result)that);
      return false;
    }

    public boolean equals(getClientStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getClientStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getClientStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClientStatus_resultStandardSchemeFactory implements SchemeFactory {
      public getClientStatus_resultStandardScheme getScheme() {
        return new getClientStatus_resultStandardScheme();
      }
    }

    private static class getClientStatus_resultStandardScheme extends StandardScheme<getClientStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getClientStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResStr();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getClientStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClientStatus_resultTupleSchemeFactory implements SchemeFactory {
      public getClientStatus_resultTupleScheme getScheme() {
        return new getClientStatus_resultTupleScheme();
      }
    }

    private static class getClientStatus_resultTupleScheme extends TupleScheme<getClientStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getClientStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getClientStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResStr();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sendMsgToUser_args implements org.apache.thrift.TBase<sendMsgToUser_args, sendMsgToUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendMsgToUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendMsgToUser_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendMsgToUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendMsgToUser_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String appId; // required
    public String userId; // required
    public String topic; // required
    public String msg; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      APP_ID((short)3, "appId"),
      USER_ID((short)4, "userId"),
      TOPIC((short)5, "topic"),
      MSG((short)6, "msg"),
      EXT((short)7, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // APP_ID
            return APP_ID;
          case 4: // USER_ID
            return USER_ID;
          case 5: // TOPIC
            return TOPIC;
          case 6: // MSG
            return MSG;
          case 7: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendMsgToUser_args.class, metaDataMap);
    }

    public sendMsgToUser_args() {
    }

    public sendMsgToUser_args(
      long logIndex,
      String caller,
      String appId,
      String userId,
      String topic,
      String msg,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.appId = appId;
      this.userId = userId;
      this.topic = topic;
      this.msg = msg;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMsgToUser_args(sendMsgToUser_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetAppId()) {
        this.appId = other.appId;
      }
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetTopic()) {
        this.topic = other.topic;
      }
      if (other.isSetMsg()) {
        this.msg = other.msg;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public sendMsgToUser_args deepCopy() {
      return new sendMsgToUser_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.appId = null;
      this.userId = null;
      this.topic = null;
      this.msg = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public sendMsgToUser_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public sendMsgToUser_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getAppId() {
      return this.appId;
    }

    public sendMsgToUser_args setAppId(String appId) {
      this.appId = appId;
      return this;
    }

    public void unsetAppId() {
      this.appId = null;
    }

    /** Returns true if field appId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppId() {
      return this.appId != null;
    }

    public void setAppIdIsSet(boolean value) {
      if (!value) {
        this.appId = null;
      }
    }

    public String getUserId() {
      return this.userId;
    }

    public sendMsgToUser_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public String getTopic() {
      return this.topic;
    }

    public sendMsgToUser_args setTopic(String topic) {
      this.topic = topic;
      return this;
    }

    public void unsetTopic() {
      this.topic = null;
    }

    /** Returns true if field topic is set (has been assigned a value) and false otherwise */
    public boolean isSetTopic() {
      return this.topic != null;
    }

    public void setTopicIsSet(boolean value) {
      if (!value) {
        this.topic = null;
      }
    }

    public String getMsg() {
      return this.msg;
    }

    public sendMsgToUser_args setMsg(String msg) {
      this.msg = msg;
      return this;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public sendMsgToUser_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case APP_ID:
        if (value == null) {
          unsetAppId();
        } else {
          setAppId((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case TOPIC:
        if (value == null) {
          unsetTopic();
        } else {
          setTopic((String)value);
        }
        break;

      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((String)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return Long.valueOf(getLogIndex());

      case CALLER:
        return getCaller();

      case APP_ID:
        return getAppId();

      case USER_ID:
        return getUserId();

      case TOPIC:
        return getTopic();

      case MSG:
        return getMsg();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case APP_ID:
        return isSetAppId();
      case USER_ID:
        return isSetUserId();
      case TOPIC:
        return isSetTopic();
      case MSG:
        return isSetMsg();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMsgToUser_args)
        return this.equals((sendMsgToUser_args)that);
      return false;
    }

    public boolean equals(sendMsgToUser_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_appId = true && this.isSetAppId();
      boolean that_present_appId = true && that.isSetAppId();
      if (this_present_appId || that_present_appId) {
        if (!(this_present_appId && that_present_appId))
          return false;
        if (!this.appId.equals(that.appId))
          return false;
      }

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_topic = true && this.isSetTopic();
      boolean that_present_topic = true && that.isSetTopic();
      if (this_present_topic || that_present_topic) {
        if (!(this_present_topic && that_present_topic))
          return false;
        if (!this.topic.equals(that.topic))
          return false;
      }

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendMsgToUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTopic()).compareTo(other.isSetTopic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, other.topic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendMsgToUser_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appId:");
      if (this.appId == null) {
        sb.append("null");
      } else {
        sb.append(this.appId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("topic:");
      if (this.topic == null) {
        sb.append("null");
      } else {
        sb.append(this.topic);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendMsgToUser_argsStandardSchemeFactory implements SchemeFactory {
      public sendMsgToUser_argsStandardScheme getScheme() {
        return new sendMsgToUser_argsStandardScheme();
      }
    }

    private static class sendMsgToUser_argsStandardScheme extends StandardScheme<sendMsgToUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendMsgToUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appId = iprot.readString();
                struct.setAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TOPIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.topic = iprot.readString();
                struct.setTopicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.msg = iprot.readString();
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendMsgToUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.appId != null) {
          oprot.writeFieldBegin(APP_ID_FIELD_DESC);
          oprot.writeString(struct.appId);
          oprot.writeFieldEnd();
        }
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.topic != null) {
          oprot.writeFieldBegin(TOPIC_FIELD_DESC);
          oprot.writeString(struct.topic);
          oprot.writeFieldEnd();
        }
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          oprot.writeString(struct.msg);
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendMsgToUser_argsTupleSchemeFactory implements SchemeFactory {
      public sendMsgToUser_argsTupleScheme getScheme() {
        return new sendMsgToUser_argsTupleScheme();
      }
    }

    private static class sendMsgToUser_argsTupleScheme extends TupleScheme<sendMsgToUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendMsgToUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetAppId()) {
          optionals.set(2);
        }
        if (struct.isSetUserId()) {
          optionals.set(3);
        }
        if (struct.isSetTopic()) {
          optionals.set(4);
        }
        if (struct.isSetMsg()) {
          optionals.set(5);
        }
        if (struct.isSetExt()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetAppId()) {
          oprot.writeString(struct.appId);
        }
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetTopic()) {
          oprot.writeString(struct.topic);
        }
        if (struct.isSetMsg()) {
          oprot.writeString(struct.msg);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendMsgToUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.appId = iprot.readString();
          struct.setAppIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.topic = iprot.readString();
          struct.setTopicIsSet(true);
        }
        if (incoming.get(5)) {
          struct.msg = iprot.readString();
          struct.setMsgIsSet(true);
        }
        if (incoming.get(6)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class sendMsgToUser_result implements org.apache.thrift.TBase<sendMsgToUser_result, sendMsgToUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendMsgToUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendMsgToUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendMsgToUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendMsgToUser_resultTupleSchemeFactory());
    }

    public ResBool success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResBool.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendMsgToUser_result.class, metaDataMap);
    }

    public sendMsgToUser_result() {
    }

    public sendMsgToUser_result(
      ResBool success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMsgToUser_result(sendMsgToUser_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResBool(other.success);
      }
    }

    public sendMsgToUser_result deepCopy() {
      return new sendMsgToUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResBool getSuccess() {
      return this.success;
    }

    public sendMsgToUser_result setSuccess(ResBool success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResBool)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMsgToUser_result)
        return this.equals((sendMsgToUser_result)that);
      return false;
    }

    public boolean equals(sendMsgToUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendMsgToUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendMsgToUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendMsgToUser_resultStandardSchemeFactory implements SchemeFactory {
      public sendMsgToUser_resultStandardScheme getScheme() {
        return new sendMsgToUser_resultStandardScheme();
      }
    }

    private static class sendMsgToUser_resultStandardScheme extends StandardScheme<sendMsgToUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendMsgToUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResBool();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendMsgToUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendMsgToUser_resultTupleSchemeFactory implements SchemeFactory {
      public sendMsgToUser_resultTupleScheme getScheme() {
        return new sendMsgToUser_resultTupleScheme();
      }
    }

    private static class sendMsgToUser_resultTupleScheme extends TupleScheme<sendMsgToUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendMsgToUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendMsgToUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResBool();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sendMsgToDevType_args implements org.apache.thrift.TBase<sendMsgToDevType_args, sendMsgToDevType_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendMsgToDevType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendMsgToDevType_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DEV_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("devType", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)8);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendMsgToDevType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendMsgToDevType_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String appId; // required
    public String userId; // required
    public String devType; // required
    public String topic; // required
    public String msg; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      APP_ID((short)3, "appId"),
      USER_ID((short)4, "userId"),
      DEV_TYPE((short)5, "devType"),
      TOPIC((short)6, "topic"),
      MSG((short)7, "msg"),
      EXT((short)8, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // APP_ID
            return APP_ID;
          case 4: // USER_ID
            return USER_ID;
          case 5: // DEV_TYPE
            return DEV_TYPE;
          case 6: // TOPIC
            return TOPIC;
          case 7: // MSG
            return MSG;
          case 8: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEV_TYPE, new org.apache.thrift.meta_data.FieldMetaData("devType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendMsgToDevType_args.class, metaDataMap);
    }

    public sendMsgToDevType_args() {
    }

    public sendMsgToDevType_args(
      long logIndex,
      String caller,
      String appId,
      String userId,
      String devType,
      String topic,
      String msg,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.appId = appId;
      this.userId = userId;
      this.devType = devType;
      this.topic = topic;
      this.msg = msg;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMsgToDevType_args(sendMsgToDevType_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetAppId()) {
        this.appId = other.appId;
      }
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetDevType()) {
        this.devType = other.devType;
      }
      if (other.isSetTopic()) {
        this.topic = other.topic;
      }
      if (other.isSetMsg()) {
        this.msg = other.msg;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public sendMsgToDevType_args deepCopy() {
      return new sendMsgToDevType_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.appId = null;
      this.userId = null;
      this.devType = null;
      this.topic = null;
      this.msg = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public sendMsgToDevType_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public sendMsgToDevType_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getAppId() {
      return this.appId;
    }

    public sendMsgToDevType_args setAppId(String appId) {
      this.appId = appId;
      return this;
    }

    public void unsetAppId() {
      this.appId = null;
    }

    /** Returns true if field appId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppId() {
      return this.appId != null;
    }

    public void setAppIdIsSet(boolean value) {
      if (!value) {
        this.appId = null;
      }
    }

    public String getUserId() {
      return this.userId;
    }

    public sendMsgToDevType_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public String getDevType() {
      return this.devType;
    }

    public sendMsgToDevType_args setDevType(String devType) {
      this.devType = devType;
      return this;
    }

    public void unsetDevType() {
      this.devType = null;
    }

    /** Returns true if field devType is set (has been assigned a value) and false otherwise */
    public boolean isSetDevType() {
      return this.devType != null;
    }

    public void setDevTypeIsSet(boolean value) {
      if (!value) {
        this.devType = null;
      }
    }

    public String getTopic() {
      return this.topic;
    }

    public sendMsgToDevType_args setTopic(String topic) {
      this.topic = topic;
      return this;
    }

    public void unsetTopic() {
      this.topic = null;
    }

    /** Returns true if field topic is set (has been assigned a value) and false otherwise */
    public boolean isSetTopic() {
      return this.topic != null;
    }

    public void setTopicIsSet(boolean value) {
      if (!value) {
        this.topic = null;
      }
    }

    public String getMsg() {
      return this.msg;
    }

    public sendMsgToDevType_args setMsg(String msg) {
      this.msg = msg;
      return this;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public sendMsgToDevType_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case APP_ID:
        if (value == null) {
          unsetAppId();
        } else {
          setAppId((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case DEV_TYPE:
        if (value == null) {
          unsetDevType();
        } else {
          setDevType((String)value);
        }
        break;

      case TOPIC:
        if (value == null) {
          unsetTopic();
        } else {
          setTopic((String)value);
        }
        break;

      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((String)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return Long.valueOf(getLogIndex());

      case CALLER:
        return getCaller();

      case APP_ID:
        return getAppId();

      case USER_ID:
        return getUserId();

      case DEV_TYPE:
        return getDevType();

      case TOPIC:
        return getTopic();

      case MSG:
        return getMsg();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case APP_ID:
        return isSetAppId();
      case USER_ID:
        return isSetUserId();
      case DEV_TYPE:
        return isSetDevType();
      case TOPIC:
        return isSetTopic();
      case MSG:
        return isSetMsg();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMsgToDevType_args)
        return this.equals((sendMsgToDevType_args)that);
      return false;
    }

    public boolean equals(sendMsgToDevType_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_appId = true && this.isSetAppId();
      boolean that_present_appId = true && that.isSetAppId();
      if (this_present_appId || that_present_appId) {
        if (!(this_present_appId && that_present_appId))
          return false;
        if (!this.appId.equals(that.appId))
          return false;
      }

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_devType = true && this.isSetDevType();
      boolean that_present_devType = true && that.isSetDevType();
      if (this_present_devType || that_present_devType) {
        if (!(this_present_devType && that_present_devType))
          return false;
        if (!this.devType.equals(that.devType))
          return false;
      }

      boolean this_present_topic = true && this.isSetTopic();
      boolean that_present_topic = true && that.isSetTopic();
      if (this_present_topic || that_present_topic) {
        if (!(this_present_topic && that_present_topic))
          return false;
        if (!this.topic.equals(that.topic))
          return false;
      }

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendMsgToDevType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDevType()).compareTo(other.isSetDevType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.devType, other.devType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTopic()).compareTo(other.isSetTopic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, other.topic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendMsgToDevType_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appId:");
      if (this.appId == null) {
        sb.append("null");
      } else {
        sb.append(this.appId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("devType:");
      if (this.devType == null) {
        sb.append("null");
      } else {
        sb.append(this.devType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("topic:");
      if (this.topic == null) {
        sb.append("null");
      } else {
        sb.append(this.topic);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendMsgToDevType_argsStandardSchemeFactory implements SchemeFactory {
      public sendMsgToDevType_argsStandardScheme getScheme() {
        return new sendMsgToDevType_argsStandardScheme();
      }
    }

    private static class sendMsgToDevType_argsStandardScheme extends StandardScheme<sendMsgToDevType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendMsgToDevType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appId = iprot.readString();
                struct.setAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DEV_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.devType = iprot.readString();
                struct.setDevTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TOPIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.topic = iprot.readString();
                struct.setTopicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.msg = iprot.readString();
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendMsgToDevType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.appId != null) {
          oprot.writeFieldBegin(APP_ID_FIELD_DESC);
          oprot.writeString(struct.appId);
          oprot.writeFieldEnd();
        }
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.devType != null) {
          oprot.writeFieldBegin(DEV_TYPE_FIELD_DESC);
          oprot.writeString(struct.devType);
          oprot.writeFieldEnd();
        }
        if (struct.topic != null) {
          oprot.writeFieldBegin(TOPIC_FIELD_DESC);
          oprot.writeString(struct.topic);
          oprot.writeFieldEnd();
        }
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          oprot.writeString(struct.msg);
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendMsgToDevType_argsTupleSchemeFactory implements SchemeFactory {
      public sendMsgToDevType_argsTupleScheme getScheme() {
        return new sendMsgToDevType_argsTupleScheme();
      }
    }

    private static class sendMsgToDevType_argsTupleScheme extends TupleScheme<sendMsgToDevType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendMsgToDevType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetAppId()) {
          optionals.set(2);
        }
        if (struct.isSetUserId()) {
          optionals.set(3);
        }
        if (struct.isSetDevType()) {
          optionals.set(4);
        }
        if (struct.isSetTopic()) {
          optionals.set(5);
        }
        if (struct.isSetMsg()) {
          optionals.set(6);
        }
        if (struct.isSetExt()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetAppId()) {
          oprot.writeString(struct.appId);
        }
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetDevType()) {
          oprot.writeString(struct.devType);
        }
        if (struct.isSetTopic()) {
          oprot.writeString(struct.topic);
        }
        if (struct.isSetMsg()) {
          oprot.writeString(struct.msg);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendMsgToDevType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.appId = iprot.readString();
          struct.setAppIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.devType = iprot.readString();
          struct.setDevTypeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.topic = iprot.readString();
          struct.setTopicIsSet(true);
        }
        if (incoming.get(6)) {
          struct.msg = iprot.readString();
          struct.setMsgIsSet(true);
        }
        if (incoming.get(7)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class sendMsgToDevType_result implements org.apache.thrift.TBase<sendMsgToDevType_result, sendMsgToDevType_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendMsgToDevType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendMsgToDevType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendMsgToDevType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendMsgToDevType_resultTupleSchemeFactory());
    }

    public ResBool success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResBool.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendMsgToDevType_result.class, metaDataMap);
    }

    public sendMsgToDevType_result() {
    }

    public sendMsgToDevType_result(
      ResBool success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMsgToDevType_result(sendMsgToDevType_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResBool(other.success);
      }
    }

    public sendMsgToDevType_result deepCopy() {
      return new sendMsgToDevType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResBool getSuccess() {
      return this.success;
    }

    public sendMsgToDevType_result setSuccess(ResBool success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResBool)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMsgToDevType_result)
        return this.equals((sendMsgToDevType_result)that);
      return false;
    }

    public boolean equals(sendMsgToDevType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendMsgToDevType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendMsgToDevType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendMsgToDevType_resultStandardSchemeFactory implements SchemeFactory {
      public sendMsgToDevType_resultStandardScheme getScheme() {
        return new sendMsgToDevType_resultStandardScheme();
      }
    }

    private static class sendMsgToDevType_resultStandardScheme extends StandardScheme<sendMsgToDevType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendMsgToDevType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResBool();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendMsgToDevType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendMsgToDevType_resultTupleSchemeFactory implements SchemeFactory {
      public sendMsgToDevType_resultTupleScheme getScheme() {
        return new sendMsgToDevType_resultTupleScheme();
      }
    }

    private static class sendMsgToDevType_resultTupleScheme extends TupleScheme<sendMsgToDevType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendMsgToDevType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendMsgToDevType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResBool();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sendBroadcastMsg_args implements org.apache.thrift.TBase<sendBroadcastMsg_args, sendBroadcastMsg_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendBroadcastMsg_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendBroadcastMsg_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendBroadcastMsg_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendBroadcastMsg_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String appId; // required
    public String topic; // required
    public String msg; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      APP_ID((short)3, "appId"),
      TOPIC((short)4, "topic"),
      MSG((short)5, "msg"),
      EXT((short)6, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // APP_ID
            return APP_ID;
          case 4: // TOPIC
            return TOPIC;
          case 5: // MSG
            return MSG;
          case 6: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendBroadcastMsg_args.class, metaDataMap);
    }

    public sendBroadcastMsg_args() {
    }

    public sendBroadcastMsg_args(
      long logIndex,
      String caller,
      String appId,
      String topic,
      String msg,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.appId = appId;
      this.topic = topic;
      this.msg = msg;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendBroadcastMsg_args(sendBroadcastMsg_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetAppId()) {
        this.appId = other.appId;
      }
      if (other.isSetTopic()) {
        this.topic = other.topic;
      }
      if (other.isSetMsg()) {
        this.msg = other.msg;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public sendBroadcastMsg_args deepCopy() {
      return new sendBroadcastMsg_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.appId = null;
      this.topic = null;
      this.msg = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public sendBroadcastMsg_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public sendBroadcastMsg_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getAppId() {
      return this.appId;
    }

    public sendBroadcastMsg_args setAppId(String appId) {
      this.appId = appId;
      return this;
    }

    public void unsetAppId() {
      this.appId = null;
    }

    /** Returns true if field appId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppId() {
      return this.appId != null;
    }

    public void setAppIdIsSet(boolean value) {
      if (!value) {
        this.appId = null;
      }
    }

    public String getTopic() {
      return this.topic;
    }

    public sendBroadcastMsg_args setTopic(String topic) {
      this.topic = topic;
      return this;
    }

    public void unsetTopic() {
      this.topic = null;
    }

    /** Returns true if field topic is set (has been assigned a value) and false otherwise */
    public boolean isSetTopic() {
      return this.topic != null;
    }

    public void setTopicIsSet(boolean value) {
      if (!value) {
        this.topic = null;
      }
    }

    public String getMsg() {
      return this.msg;
    }

    public sendBroadcastMsg_args setMsg(String msg) {
      this.msg = msg;
      return this;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public sendBroadcastMsg_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case APP_ID:
        if (value == null) {
          unsetAppId();
        } else {
          setAppId((String)value);
        }
        break;

      case TOPIC:
        if (value == null) {
          unsetTopic();
        } else {
          setTopic((String)value);
        }
        break;

      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((String)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return Long.valueOf(getLogIndex());

      case CALLER:
        return getCaller();

      case APP_ID:
        return getAppId();

      case TOPIC:
        return getTopic();

      case MSG:
        return getMsg();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case APP_ID:
        return isSetAppId();
      case TOPIC:
        return isSetTopic();
      case MSG:
        return isSetMsg();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendBroadcastMsg_args)
        return this.equals((sendBroadcastMsg_args)that);
      return false;
    }

    public boolean equals(sendBroadcastMsg_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_appId = true && this.isSetAppId();
      boolean that_present_appId = true && that.isSetAppId();
      if (this_present_appId || that_present_appId) {
        if (!(this_present_appId && that_present_appId))
          return false;
        if (!this.appId.equals(that.appId))
          return false;
      }

      boolean this_present_topic = true && this.isSetTopic();
      boolean that_present_topic = true && that.isSetTopic();
      if (this_present_topic || that_present_topic) {
        if (!(this_present_topic && that_present_topic))
          return false;
        if (!this.topic.equals(that.topic))
          return false;
      }

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendBroadcastMsg_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTopic()).compareTo(other.isSetTopic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, other.topic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendBroadcastMsg_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appId:");
      if (this.appId == null) {
        sb.append("null");
      } else {
        sb.append(this.appId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("topic:");
      if (this.topic == null) {
        sb.append("null");
      } else {
        sb.append(this.topic);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendBroadcastMsg_argsStandardSchemeFactory implements SchemeFactory {
      public sendBroadcastMsg_argsStandardScheme getScheme() {
        return new sendBroadcastMsg_argsStandardScheme();
      }
    }

    private static class sendBroadcastMsg_argsStandardScheme extends StandardScheme<sendBroadcastMsg_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendBroadcastMsg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appId = iprot.readString();
                struct.setAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TOPIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.topic = iprot.readString();
                struct.setTopicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.msg = iprot.readString();
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendBroadcastMsg_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.appId != null) {
          oprot.writeFieldBegin(APP_ID_FIELD_DESC);
          oprot.writeString(struct.appId);
          oprot.writeFieldEnd();
        }
        if (struct.topic != null) {
          oprot.writeFieldBegin(TOPIC_FIELD_DESC);
          oprot.writeString(struct.topic);
          oprot.writeFieldEnd();
        }
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          oprot.writeString(struct.msg);
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendBroadcastMsg_argsTupleSchemeFactory implements SchemeFactory {
      public sendBroadcastMsg_argsTupleScheme getScheme() {
        return new sendBroadcastMsg_argsTupleScheme();
      }
    }

    private static class sendBroadcastMsg_argsTupleScheme extends TupleScheme<sendBroadcastMsg_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendBroadcastMsg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetAppId()) {
          optionals.set(2);
        }
        if (struct.isSetTopic()) {
          optionals.set(3);
        }
        if (struct.isSetMsg()) {
          optionals.set(4);
        }
        if (struct.isSetExt()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetAppId()) {
          oprot.writeString(struct.appId);
        }
        if (struct.isSetTopic()) {
          oprot.writeString(struct.topic);
        }
        if (struct.isSetMsg()) {
          oprot.writeString(struct.msg);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendBroadcastMsg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.appId = iprot.readString();
          struct.setAppIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.topic = iprot.readString();
          struct.setTopicIsSet(true);
        }
        if (incoming.get(4)) {
          struct.msg = iprot.readString();
          struct.setMsgIsSet(true);
        }
        if (incoming.get(5)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class sendBroadcastMsg_result implements org.apache.thrift.TBase<sendBroadcastMsg_result, sendBroadcastMsg_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendBroadcastMsg_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendBroadcastMsg_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendBroadcastMsg_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendBroadcastMsg_resultTupleSchemeFactory());
    }

    public ResBool success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResBool.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendBroadcastMsg_result.class, metaDataMap);
    }

    public sendBroadcastMsg_result() {
    }

    public sendBroadcastMsg_result(
      ResBool success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendBroadcastMsg_result(sendBroadcastMsg_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResBool(other.success);
      }
    }

    public sendBroadcastMsg_result deepCopy() {
      return new sendBroadcastMsg_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResBool getSuccess() {
      return this.success;
    }

    public sendBroadcastMsg_result setSuccess(ResBool success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResBool)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendBroadcastMsg_result)
        return this.equals((sendBroadcastMsg_result)that);
      return false;
    }

    public boolean equals(sendBroadcastMsg_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendBroadcastMsg_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendBroadcastMsg_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendBroadcastMsg_resultStandardSchemeFactory implements SchemeFactory {
      public sendBroadcastMsg_resultStandardScheme getScheme() {
        return new sendBroadcastMsg_resultStandardScheme();
      }
    }

    private static class sendBroadcastMsg_resultStandardScheme extends StandardScheme<sendBroadcastMsg_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendBroadcastMsg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResBool();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendBroadcastMsg_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendBroadcastMsg_resultTupleSchemeFactory implements SchemeFactory {
      public sendBroadcastMsg_resultTupleScheme getScheme() {
        return new sendBroadcastMsg_resultTupleScheme();
      }
    }

    private static class sendBroadcastMsg_resultTupleScheme extends TupleScheme<sendBroadcastMsg_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendBroadcastMsg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendBroadcastMsg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResBool();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sendMsgToUsers_args implements org.apache.thrift.TBase<sendMsgToUsers_args, sendMsgToUsers_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendMsgToUsers_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendMsgToUsers_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField DST_USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("dstUserIds", org.apache.thrift.protocol.TType.SET, (short)4);
    private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendMsgToUsers_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendMsgToUsers_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String appId; // required
    public Set<String> dstUserIds; // required
    public String topic; // required
    public String msg; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      APP_ID((short)3, "appId"),
      DST_USER_IDS((short)4, "dstUserIds"),
      TOPIC((short)5, "topic"),
      MSG((short)6, "msg"),
      EXT((short)7, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // APP_ID
            return APP_ID;
          case 4: // DST_USER_IDS
            return DST_USER_IDS;
          case 5: // TOPIC
            return TOPIC;
          case 6: // MSG
            return MSG;
          case 7: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DST_USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("dstUserIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendMsgToUsers_args.class, metaDataMap);
    }

    public sendMsgToUsers_args() {
    }

    public sendMsgToUsers_args(
      long logIndex,
      String caller,
      String appId,
      Set<String> dstUserIds,
      String topic,
      String msg,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.appId = appId;
      this.dstUserIds = dstUserIds;
      this.topic = topic;
      this.msg = msg;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMsgToUsers_args(sendMsgToUsers_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetAppId()) {
        this.appId = other.appId;
      }
      if (other.isSetDstUserIds()) {
        Set<String> __this__dstUserIds = new HashSet<String>(other.dstUserIds);
        this.dstUserIds = __this__dstUserIds;
      }
      if (other.isSetTopic()) {
        this.topic = other.topic;
      }
      if (other.isSetMsg()) {
        this.msg = other.msg;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public sendMsgToUsers_args deepCopy() {
      return new sendMsgToUsers_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.appId = null;
      this.dstUserIds = null;
      this.topic = null;
      this.msg = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public sendMsgToUsers_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public sendMsgToUsers_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getAppId() {
      return this.appId;
    }

    public sendMsgToUsers_args setAppId(String appId) {
      this.appId = appId;
      return this;
    }

    public void unsetAppId() {
      this.appId = null;
    }

    /** Returns true if field appId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppId() {
      return this.appId != null;
    }

    public void setAppIdIsSet(boolean value) {
      if (!value) {
        this.appId = null;
      }
    }

    public int getDstUserIdsSize() {
      return (this.dstUserIds == null) ? 0 : this.dstUserIds.size();
    }

    public java.util.Iterator<String> getDstUserIdsIterator() {
      return (this.dstUserIds == null) ? null : this.dstUserIds.iterator();
    }

    public void addToDstUserIds(String elem) {
      if (this.dstUserIds == null) {
        this.dstUserIds = new HashSet<String>();
      }
      this.dstUserIds.add(elem);
    }

    public Set<String> getDstUserIds() {
      return this.dstUserIds;
    }

    public sendMsgToUsers_args setDstUserIds(Set<String> dstUserIds) {
      this.dstUserIds = dstUserIds;
      return this;
    }

    public void unsetDstUserIds() {
      this.dstUserIds = null;
    }

    /** Returns true if field dstUserIds is set (has been assigned a value) and false otherwise */
    public boolean isSetDstUserIds() {
      return this.dstUserIds != null;
    }

    public void setDstUserIdsIsSet(boolean value) {
      if (!value) {
        this.dstUserIds = null;
      }
    }

    public String getTopic() {
      return this.topic;
    }

    public sendMsgToUsers_args setTopic(String topic) {
      this.topic = topic;
      return this;
    }

    public void unsetTopic() {
      this.topic = null;
    }

    /** Returns true if field topic is set (has been assigned a value) and false otherwise */
    public boolean isSetTopic() {
      return this.topic != null;
    }

    public void setTopicIsSet(boolean value) {
      if (!value) {
        this.topic = null;
      }
    }

    public String getMsg() {
      return this.msg;
    }

    public sendMsgToUsers_args setMsg(String msg) {
      this.msg = msg;
      return this;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public sendMsgToUsers_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case APP_ID:
        if (value == null) {
          unsetAppId();
        } else {
          setAppId((String)value);
        }
        break;

      case DST_USER_IDS:
        if (value == null) {
          unsetDstUserIds();
        } else {
          setDstUserIds((Set<String>)value);
        }
        break;

      case TOPIC:
        if (value == null) {
          unsetTopic();
        } else {
          setTopic((String)value);
        }
        break;

      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((String)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return Long.valueOf(getLogIndex());

      case CALLER:
        return getCaller();

      case APP_ID:
        return getAppId();

      case DST_USER_IDS:
        return getDstUserIds();

      case TOPIC:
        return getTopic();

      case MSG:
        return getMsg();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case APP_ID:
        return isSetAppId();
      case DST_USER_IDS:
        return isSetDstUserIds();
      case TOPIC:
        return isSetTopic();
      case MSG:
        return isSetMsg();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMsgToUsers_args)
        return this.equals((sendMsgToUsers_args)that);
      return false;
    }

    public boolean equals(sendMsgToUsers_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_appId = true && this.isSetAppId();
      boolean that_present_appId = true && that.isSetAppId();
      if (this_present_appId || that_present_appId) {
        if (!(this_present_appId && that_present_appId))
          return false;
        if (!this.appId.equals(that.appId))
          return false;
      }

      boolean this_present_dstUserIds = true && this.isSetDstUserIds();
      boolean that_present_dstUserIds = true && that.isSetDstUserIds();
      if (this_present_dstUserIds || that_present_dstUserIds) {
        if (!(this_present_dstUserIds && that_present_dstUserIds))
          return false;
        if (!this.dstUserIds.equals(that.dstUserIds))
          return false;
      }

      boolean this_present_topic = true && this.isSetTopic();
      boolean that_present_topic = true && that.isSetTopic();
      if (this_present_topic || that_present_topic) {
        if (!(this_present_topic && that_present_topic))
          return false;
        if (!this.topic.equals(that.topic))
          return false;
      }

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendMsgToUsers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDstUserIds()).compareTo(other.isSetDstUserIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDstUserIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstUserIds, other.dstUserIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTopic()).compareTo(other.isSetTopic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, other.topic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendMsgToUsers_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appId:");
      if (this.appId == null) {
        sb.append("null");
      } else {
        sb.append(this.appId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dstUserIds:");
      if (this.dstUserIds == null) {
        sb.append("null");
      } else {
        sb.append(this.dstUserIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("topic:");
      if (this.topic == null) {
        sb.append("null");
      } else {
        sb.append(this.topic);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendMsgToUsers_argsStandardSchemeFactory implements SchemeFactory {
      public sendMsgToUsers_argsStandardScheme getScheme() {
        return new sendMsgToUsers_argsStandardScheme();
      }
    }

    private static class sendMsgToUsers_argsStandardScheme extends StandardScheme<sendMsgToUsers_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendMsgToUsers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appId = iprot.readString();
                struct.setAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DST_USER_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                  struct.dstUserIds = new HashSet<String>(2*_set0.size);
                  for (int _i1 = 0; _i1 < _set0.size; ++_i1)
                  {
                    String _elem2;
                    _elem2 = iprot.readString();
                    struct.dstUserIds.add(_elem2);
                  }
                  iprot.readSetEnd();
                }
                struct.setDstUserIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TOPIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.topic = iprot.readString();
                struct.setTopicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.msg = iprot.readString();
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendMsgToUsers_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.appId != null) {
          oprot.writeFieldBegin(APP_ID_FIELD_DESC);
          oprot.writeString(struct.appId);
          oprot.writeFieldEnd();
        }
        if (struct.dstUserIds != null) {
          oprot.writeFieldBegin(DST_USER_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.dstUserIds.size()));
            for (String _iter3 : struct.dstUserIds)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.topic != null) {
          oprot.writeFieldBegin(TOPIC_FIELD_DESC);
          oprot.writeString(struct.topic);
          oprot.writeFieldEnd();
        }
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          oprot.writeString(struct.msg);
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendMsgToUsers_argsTupleSchemeFactory implements SchemeFactory {
      public sendMsgToUsers_argsTupleScheme getScheme() {
        return new sendMsgToUsers_argsTupleScheme();
      }
    }

    private static class sendMsgToUsers_argsTupleScheme extends TupleScheme<sendMsgToUsers_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendMsgToUsers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetAppId()) {
          optionals.set(2);
        }
        if (struct.isSetDstUserIds()) {
          optionals.set(3);
        }
        if (struct.isSetTopic()) {
          optionals.set(4);
        }
        if (struct.isSetMsg()) {
          optionals.set(5);
        }
        if (struct.isSetExt()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetAppId()) {
          oprot.writeString(struct.appId);
        }
        if (struct.isSetDstUserIds()) {
          {
            oprot.writeI32(struct.dstUserIds.size());
            for (String _iter4 : struct.dstUserIds)
            {
              oprot.writeString(_iter4);
            }
          }
        }
        if (struct.isSetTopic()) {
          oprot.writeString(struct.topic);
        }
        if (struct.isSetMsg()) {
          oprot.writeString(struct.msg);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendMsgToUsers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.appId = iprot.readString();
          struct.setAppIdIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TSet _set5 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.dstUserIds = new HashSet<String>(2*_set5.size);
            for (int _i6 = 0; _i6 < _set5.size; ++_i6)
            {
              String _elem7;
              _elem7 = iprot.readString();
              struct.dstUserIds.add(_elem7);
            }
          }
          struct.setDstUserIdsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.topic = iprot.readString();
          struct.setTopicIsSet(true);
        }
        if (incoming.get(5)) {
          struct.msg = iprot.readString();
          struct.setMsgIsSet(true);
        }
        if (incoming.get(6)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class sendMsgToUsers_result implements org.apache.thrift.TBase<sendMsgToUsers_result, sendMsgToUsers_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendMsgToUsers_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendMsgToUsers_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendMsgToUsers_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendMsgToUsers_resultTupleSchemeFactory());
    }

    public ResSetStr success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResSetStr.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendMsgToUsers_result.class, metaDataMap);
    }

    public sendMsgToUsers_result() {
    }

    public sendMsgToUsers_result(
      ResSetStr success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMsgToUsers_result(sendMsgToUsers_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResSetStr(other.success);
      }
    }

    public sendMsgToUsers_result deepCopy() {
      return new sendMsgToUsers_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResSetStr getSuccess() {
      return this.success;
    }

    public sendMsgToUsers_result setSuccess(ResSetStr success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResSetStr)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMsgToUsers_result)
        return this.equals((sendMsgToUsers_result)that);
      return false;
    }

    public boolean equals(sendMsgToUsers_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendMsgToUsers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendMsgToUsers_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendMsgToUsers_resultStandardSchemeFactory implements SchemeFactory {
      public sendMsgToUsers_resultStandardScheme getScheme() {
        return new sendMsgToUsers_resultStandardScheme();
      }
    }

    private static class sendMsgToUsers_resultStandardScheme extends StandardScheme<sendMsgToUsers_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendMsgToUsers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResSetStr();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendMsgToUsers_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendMsgToUsers_resultTupleSchemeFactory implements SchemeFactory {
      public sendMsgToUsers_resultTupleScheme getScheme() {
        return new sendMsgToUsers_resultTupleScheme();
      }
    }

    private static class sendMsgToUsers_resultTupleScheme extends TupleScheme<sendMsgToUsers_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendMsgToUsers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendMsgToUsers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResSetStr();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class echo_args implements org.apache.thrift.TBase<echo_args, echo_args._Fields>, java.io.Serializable, Cloneable, Comparable<echo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echo_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SRC_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("srcStr", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new echo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new echo_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String srcStr; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      SRC_STR((short)3, "srcStr"),
      EXT((short)4, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // SRC_STR
            return SRC_STR;
          case 4: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SRC_STR, new org.apache.thrift.meta_data.FieldMetaData("srcStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echo_args.class, metaDataMap);
    }

    public echo_args() {
    }

    public echo_args(
      long logIndex,
      String caller,
      String srcStr,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.srcStr = srcStr;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public echo_args(echo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetSrcStr()) {
        this.srcStr = other.srcStr;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public echo_args deepCopy() {
      return new echo_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.srcStr = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public echo_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public echo_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getSrcStr() {
      return this.srcStr;
    }

    public echo_args setSrcStr(String srcStr) {
      this.srcStr = srcStr;
      return this;
    }

    public void unsetSrcStr() {
      this.srcStr = null;
    }

    /** Returns true if field srcStr is set (has been assigned a value) and false otherwise */
    public boolean isSetSrcStr() {
      return this.srcStr != null;
    }

    public void setSrcStrIsSet(boolean value) {
      if (!value) {
        this.srcStr = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public echo_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case SRC_STR:
        if (value == null) {
          unsetSrcStr();
        } else {
          setSrcStr((String)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return Long.valueOf(getLogIndex());

      case CALLER:
        return getCaller();

      case SRC_STR:
        return getSrcStr();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case SRC_STR:
        return isSetSrcStr();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof echo_args)
        return this.equals((echo_args)that);
      return false;
    }

    public boolean equals(echo_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_srcStr = true && this.isSetSrcStr();
      boolean that_present_srcStr = true && that.isSetSrcStr();
      if (this_present_srcStr || that_present_srcStr) {
        if (!(this_present_srcStr && that_present_srcStr))
          return false;
        if (!this.srcStr.equals(that.srcStr))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(echo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrcStr()).compareTo(other.isSetSrcStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrcStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcStr, other.srcStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("echo_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srcStr:");
      if (this.srcStr == null) {
        sb.append("null");
      } else {
        sb.append(this.srcStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class echo_argsStandardSchemeFactory implements SchemeFactory {
      public echo_argsStandardScheme getScheme() {
        return new echo_argsStandardScheme();
      }
    }

    private static class echo_argsStandardScheme extends StandardScheme<echo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, echo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SRC_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.srcStr = iprot.readString();
                struct.setSrcStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, echo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.srcStr != null) {
          oprot.writeFieldBegin(SRC_STR_FIELD_DESC);
          oprot.writeString(struct.srcStr);
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class echo_argsTupleSchemeFactory implements SchemeFactory {
      public echo_argsTupleScheme getScheme() {
        return new echo_argsTupleScheme();
      }
    }

    private static class echo_argsTupleScheme extends TupleScheme<echo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, echo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetSrcStr()) {
          optionals.set(2);
        }
        if (struct.isSetExt()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetSrcStr()) {
          oprot.writeString(struct.srcStr);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, echo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.srcStr = iprot.readString();
          struct.setSrcStrIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class echo_result implements org.apache.thrift.TBase<echo_result, echo_result._Fields>, java.io.Serializable, Cloneable, Comparable<echo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new echo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new echo_resultTupleSchemeFactory());
    }

    public ResStr success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResStr.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echo_result.class, metaDataMap);
    }

    public echo_result() {
    }

    public echo_result(
      ResStr success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public echo_result(echo_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResStr(other.success);
      }
    }

    public echo_result deepCopy() {
      return new echo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResStr getSuccess() {
      return this.success;
    }

    public echo_result setSuccess(ResStr success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResStr)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof echo_result)
        return this.equals((echo_result)that);
      return false;
    }

    public boolean equals(echo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(echo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("echo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class echo_resultStandardSchemeFactory implements SchemeFactory {
      public echo_resultStandardScheme getScheme() {
        return new echo_resultStandardScheme();
      }
    }

    private static class echo_resultStandardScheme extends StandardScheme<echo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, echo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResStr();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, echo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class echo_resultTupleSchemeFactory implements SchemeFactory {
      public echo_resultTupleScheme getScheme() {
        return new echo_resultTupleScheme();
      }
    }

    private static class echo_resultTupleScheme extends TupleScheme<echo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, echo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, echo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResStr();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
